//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/andrew/RiderProjects/SMTLIB2-cc/smtlibv2-grammar/src/main/resources/SMTLIBv2.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SMTLIBv2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Comment=1, ParOpen=2, ParClose=3, Semicolon=4, String=5, QuotedSymbol=6, 
		PS_Not=7, PS_Bool=8, PS_ContinuedExecution=9, PS_Error=10, PS_False=11, 
		PS_ImmediateExit=12, PS_Incomplete=13, PS_Logic=14, PS_Memout=15, PS_Sat=16, 
		PS_Success=17, PS_Theory=18, PS_True=19, PS_Unknown=20, PS_Unsupported=21, 
		PS_Unsat=22, CMD_Assert=23, CMD_Asserted=24, CMD_CheckSat=25, CMD_CheckSatAssuming=26, 
		CMD_DeclareConst=27, CMD_DeclareDatatype=28, CMD_DeclareDatatypes=29, 
		CMD_DeclareFun=30, CMD_DeclareSort=31, CMD_DefineFun=32, CMD_DefineFunRec=33, 
		CMD_DefineFunsRec=34, CMD_DefineSort=35, CMD_Echo=36, CMD_Exit=37, CMD_GetAssertions=38, 
		CMD_GetAssignment=39, CMD_GetInfo=40, CMD_GetModel=41, CMD_GetOption=42, 
		CMD_GetProof=43, CMD_GetUnsatAssumptions=44, CMD_GetUnsatCore=45, CMD_GetValue=46, 
		CMD_Lemma=47, CMD_Pop=48, CMD_Push=49, CMD_Reset=50, CMD_ResetAssertions=51, 
		CMD_SetInfo=52, CMD_SetLogic=53, CMD_SetOption=54, CMD_HyperRes=55, CMD_Mp=56, 
		CMD_Proof=57, GRW_Exclamation=58, GRW_Underscore=59, GRW_As=60, GRW_Binary=61, 
		GRW_Decimal=62, GRW_Exists=63, GRW_Hexadecimal=64, GRW_Forall=65, GRW_Let=66, 
		GRW_Match=67, GRW_Numeral=68, GRW_Par=69, GRW_String=70, Numeral=71, Binary=72, 
		HexDecimal=73, Decimal=74, Colon=75, PK_AllStatistics=76, PK_AssertionStackLevels=77, 
		PK_Authors=78, PK_Category=79, PK_Chainable=80, PK_Definition=81, PK_DiagnosticOutputChannel=82, 
		PK_ErrorBehaviour=83, PK_Extension=84, PK_Funs=85, PK_FunsDescription=86, 
		PK_GlobalDeclarations=87, PK_InteractiveMode=88, PK_Language=89, PK_LeftAssoc=90, 
		PK_License=91, PK_Named=92, PK_Name=93, PK_Notes=94, PK_Pattern=95, PK_PrintSuccess=96, 
		PK_ProduceAssertions=97, PK_ProduceAssignments=98, PK_ProduceModels=99, 
		PK_ProduceProofs=100, PK_ProduceUnsatAssumptions=101, PK_ProduceUnsatCores=102, 
		PK_RandomSeed=103, PK_ReasonUnknown=104, PK_RegularOutputChannel=105, 
		PK_ReproducibleResourceLimit=106, PK_RightAssoc=107, PK_SmtLibVersion=108, 
		PK_Sorts=109, PK_SortsDescription=110, PK_Source=111, PK_Status=112, PK_Theories=113, 
		PK_Values=114, PK_Verbosity=115, PK_Version=116, UndefinedSymbol=117, 
		WS=118;
	public const int
		RULE_start = 0, RULE_response = 1, RULE_generalReservedWord = 2, RULE_simpleSymbol = 3, 
		RULE_quotedSymbol = 4, RULE_predefSymbol = 5, RULE_predefKeyword = 6, 
		RULE_symbol = 7, RULE_numeral = 8, RULE_decimal = 9, RULE_hexadecimal = 10, 
		RULE_binary = 11, RULE_string = 12, RULE_keyword = 13, RULE_spec_constant = 14, 
		RULE_s_expr = 15, RULE_index = 16, RULE_identifier = 17, RULE_attribute_value = 18, 
		RULE_attribute = 19, RULE_sort = 20, RULE_qual_identifier = 21, RULE_var_binding = 22, 
		RULE_sorted_var = 23, RULE_pattern = 24, RULE_match_case = 25, RULE_term = 26, 
		RULE_sort_symbol_decl = 27, RULE_meta_spec_constant = 28, RULE_fun_symbol_decl = 29, 
		RULE_par_fun_symbol_decl = 30, RULE_theory_attribute = 31, RULE_theory_decl = 32, 
		RULE_logic_attribue = 33, RULE_logic = 34, RULE_sort_dec = 35, RULE_selector_dec = 36, 
		RULE_constructor_dec = 37, RULE_datatype_dec = 38, RULE_function_dec = 39, 
		RULE_function_def = 40, RULE_prop_literal = 41, RULE_script = 42, RULE_asserted = 43, 
		RULE_cmd_assert = 44, RULE_cmd_checkSat = 45, RULE_cmd_checkSatAssuming = 46, 
		RULE_cmd_declareConst = 47, RULE_cmd_declareDatatype = 48, RULE_cmd_declareDatatypes = 49, 
		RULE_cmd_declareFun = 50, RULE_cmd_declareSort = 51, RULE_cmd_defineFun = 52, 
		RULE_cmd_defineFunRec = 53, RULE_cmd_defineFunsRec = 54, RULE_cmd_defineSort = 55, 
		RULE_cmd_echo = 56, RULE_cmd_exit = 57, RULE_cmd_getAssertions = 58, RULE_cmd_getAssignment = 59, 
		RULE_cmd_getInfo = 60, RULE_cmd_getModel = 61, RULE_cmd_getOption = 62, 
		RULE_cmd_getProof = 63, RULE_cmd_getUnsatAssumptions = 64, RULE_cmd_getUnsatCore = 65, 
		RULE_cmd_getValue = 66, RULE_cmd_lemma = 67, RULE_cmd_pop = 68, RULE_cmd_push = 69, 
		RULE_cmd_reset = 70, RULE_cmd_resetAssertions = 71, RULE_cmd_setInfo = 72, 
		RULE_cmd_setLogic = 73, RULE_cmd_setOption = 74, RULE_cmd_hyperRes = 75, 
		RULE_cmd_mp = 76, RULE_cmd_proof = 77, RULE_cmd_predicat = 78, RULE_args_predicat = 79, 
		RULE_hyper_proof = 80, RULE_proof = 81, RULE_command = 82, RULE_b_value = 83, 
		RULE_option = 84, RULE_info_flag = 85, RULE_error_behaviour = 86, RULE_reason_unknown = 87, 
		RULE_model_response = 88, RULE_info_response = 89, RULE_valuation_pair = 90, 
		RULE_t_valuation_pair = 91, RULE_check_sat_response = 92, RULE_echo_response = 93, 
		RULE_get_assertions_response = 94, RULE_get_assignment_response = 95, 
		RULE_get_info_response = 96, RULE_get_model_response = 97, RULE_get_option_response = 98, 
		RULE_get_proof_response = 99, RULE_get_unsat_assump_response = 100, RULE_get_unsat_core_response = 101, 
		RULE_get_value_response = 102, RULE_specific_success_response = 103, RULE_general_response = 104;
	public static readonly string[] ruleNames = {
		"start", "response", "generalReservedWord", "simpleSymbol", "quotedSymbol", 
		"predefSymbol", "predefKeyword", "symbol", "numeral", "decimal", "hexadecimal", 
		"binary", "string", "keyword", "spec_constant", "s_expr", "index", "identifier", 
		"attribute_value", "attribute", "sort", "qual_identifier", "var_binding", 
		"sorted_var", "pattern", "match_case", "term", "sort_symbol_decl", "meta_spec_constant", 
		"fun_symbol_decl", "par_fun_symbol_decl", "theory_attribute", "theory_decl", 
		"logic_attribue", "logic", "sort_dec", "selector_dec", "constructor_dec", 
		"datatype_dec", "function_dec", "function_def", "prop_literal", "script", 
		"asserted", "cmd_assert", "cmd_checkSat", "cmd_checkSatAssuming", "cmd_declareConst", 
		"cmd_declareDatatype", "cmd_declareDatatypes", "cmd_declareFun", "cmd_declareSort", 
		"cmd_defineFun", "cmd_defineFunRec", "cmd_defineFunsRec", "cmd_defineSort", 
		"cmd_echo", "cmd_exit", "cmd_getAssertions", "cmd_getAssignment", "cmd_getInfo", 
		"cmd_getModel", "cmd_getOption", "cmd_getProof", "cmd_getUnsatAssumptions", 
		"cmd_getUnsatCore", "cmd_getValue", "cmd_lemma", "cmd_pop", "cmd_push", 
		"cmd_reset", "cmd_resetAssertions", "cmd_setInfo", "cmd_setLogic", "cmd_setOption", 
		"cmd_hyperRes", "cmd_mp", "cmd_proof", "cmd_predicat", "args_predicat", 
		"hyper_proof", "proof", "command", "b_value", "option", "info_flag", "error_behaviour", 
		"reason_unknown", "model_response", "info_response", "valuation_pair", 
		"t_valuation_pair", "check_sat_response", "echo_response", "get_assertions_response", 
		"get_assignment_response", "get_info_response", "get_model_response", 
		"get_option_response", "get_proof_response", "get_unsat_assump_response", 
		"get_unsat_core_response", "get_value_response", "specific_success_response", 
		"general_response"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "';'", null, null, "'not'", "'Bool'", "'continued-execution'", 
		"'error'", "'false'", "'immediate-exit'", "'incomplete'", "'logic'", "'memout'", 
		"'sat'", "'success'", "'theory'", "'true'", "'unknown'", "'unsupported'", 
		"'unsat'", "'assert'", "'asserted'", "'check-sat'", "'check-sat-assuming'", 
		"'declare-const'", "'declare-datatype'", "'declare-datatypes'", "'declare-fun'", 
		"'declare-sort'", "'define-fun'", "'define-fun-rec'", "'define-funs-rec'", 
		"'define-sort'", "'echo'", "'exit'", "'get-assertions'", "'get-assignment'", 
		"'get-info'", "'get-model'", "'get-option'", "'get-proof'", "'get-unsat-assumptions'", 
		"'get-unsat-core'", "'get-value'", "'lemma'", "'pop'", "'push'", "'reset'", 
		"'reset-assertions'", "'set-info'", "'set-logic'", "'set-option'", null, 
		"'mp'", "'proof'", "'!'", "'_'", "'as'", "'BINARY'", "'DECIMAL'", "'exists'", 
		"'HEXADECIMAL'", "'forall'", "'let'", "'match'", "'NUMERAL'", "'par'", 
		"'string'", null, null, null, null, "':'", "':all-statistics'", "':assertion-stack-levels'", 
		"':authors'", "':category'", "':chainable'", "':definition'", "':diagnostic-output-channel'", 
		"':error-behavior'", "':extensions'", "':funs'", "':funs-description'", 
		"':global-declarations'", "':interactive-mode'", "':language'", "':left-assoc'", 
		"':license'", "':named'", "':name'", "':notes'", "':pattern'", "':print-success'", 
		"':produce-assertions'", "':produce-assignments'", "':produce-models'", 
		"':produce-proofs'", "':produce-unsat-assumptions'", "':produce-unsat-cores'", 
		"':random-seed'", "':reason-unknown'", "':regular-output-channel'", "':reproducible-resource-limit'", 
		"':right-assoc'", "':smt-lib-version'", "':sorts'", "':sorts-description'", 
		"':source'", "':status'", "':theories'", "':values'", "':verbosity'", 
		"':version'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comment", "ParOpen", "ParClose", "Semicolon", "String", "QuotedSymbol", 
		"PS_Not", "PS_Bool", "PS_ContinuedExecution", "PS_Error", "PS_False", 
		"PS_ImmediateExit", "PS_Incomplete", "PS_Logic", "PS_Memout", "PS_Sat", 
		"PS_Success", "PS_Theory", "PS_True", "PS_Unknown", "PS_Unsupported", 
		"PS_Unsat", "CMD_Assert", "CMD_Asserted", "CMD_CheckSat", "CMD_CheckSatAssuming", 
		"CMD_DeclareConst", "CMD_DeclareDatatype", "CMD_DeclareDatatypes", "CMD_DeclareFun", 
		"CMD_DeclareSort", "CMD_DefineFun", "CMD_DefineFunRec", "CMD_DefineFunsRec", 
		"CMD_DefineSort", "CMD_Echo", "CMD_Exit", "CMD_GetAssertions", "CMD_GetAssignment", 
		"CMD_GetInfo", "CMD_GetModel", "CMD_GetOption", "CMD_GetProof", "CMD_GetUnsatAssumptions", 
		"CMD_GetUnsatCore", "CMD_GetValue", "CMD_Lemma", "CMD_Pop", "CMD_Push", 
		"CMD_Reset", "CMD_ResetAssertions", "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", 
		"CMD_HyperRes", "CMD_Mp", "CMD_Proof", "GRW_Exclamation", "GRW_Underscore", 
		"GRW_As", "GRW_Binary", "GRW_Decimal", "GRW_Exists", "GRW_Hexadecimal", 
		"GRW_Forall", "GRW_Let", "GRW_Match", "GRW_Numeral", "GRW_Par", "GRW_String", 
		"Numeral", "Binary", "HexDecimal", "Decimal", "Colon", "PK_AllStatistics", 
		"PK_AssertionStackLevels", "PK_Authors", "PK_Category", "PK_Chainable", 
		"PK_Definition", "PK_DiagnosticOutputChannel", "PK_ErrorBehaviour", "PK_Extension", 
		"PK_Funs", "PK_FunsDescription", "PK_GlobalDeclarations", "PK_InteractiveMode", 
		"PK_Language", "PK_LeftAssoc", "PK_License", "PK_Named", "PK_Name", "PK_Notes", 
		"PK_Pattern", "PK_PrintSuccess", "PK_ProduceAssertions", "PK_ProduceAssignments", 
		"PK_ProduceModels", "PK_ProduceProofs", "PK_ProduceUnsatAssumptions", 
		"PK_ProduceUnsatCores", "PK_RandomSeed", "PK_ReasonUnknown", "PK_RegularOutputChannel", 
		"PK_ReproducibleResourceLimit", "PK_RightAssoc", "PK_SmtLibVersion", "PK_Sorts", 
		"PK_SortsDescription", "PK_Source", "PK_Status", "PK_Theories", "PK_Values", 
		"PK_Verbosity", "PK_Version", "UndefinedSymbol", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SMTLIBv2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SMTLIBv2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SMTLIBv2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SMTLIBv2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SMTLIBv2Parser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			script();
			State = 211;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public General_responseContext general_response() {
			return GetRuleContext<General_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SMTLIBv2Parser.Eof, 0); }
		public ResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResponse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResponseContext response() {
		ResponseContext _localctx = new ResponseContext(Context, State);
		EnterRule(_localctx, 2, RULE_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			general_response();
			State = 214;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exclamation() { return GetToken(SMTLIBv2Parser.GRW_Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Underscore() { return GetToken(SMTLIBv2Parser.GRW_Underscore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_As() { return GetToken(SMTLIBv2Parser.GRW_As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Binary() { return GetToken(SMTLIBv2Parser.GRW_Binary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Decimal() { return GetToken(SMTLIBv2Parser.GRW_Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exists() { return GetToken(SMTLIBv2Parser.GRW_Exists, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Hexadecimal() { return GetToken(SMTLIBv2Parser.GRW_Hexadecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Forall() { return GetToken(SMTLIBv2Parser.GRW_Forall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Let() { return GetToken(SMTLIBv2Parser.GRW_Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Match() { return GetToken(SMTLIBv2Parser.GRW_Match, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Numeral() { return GetToken(SMTLIBv2Parser.GRW_Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_String() { return GetToken(SMTLIBv2Parser.GRW_String, 0); }
		public GeneralReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalReservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGeneralReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGeneralReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralReservedWordContext generalReservedWord() {
		GeneralReservedWordContext _localctx = new GeneralReservedWordContext(Context, State);
		EnterRule(_localctx, 4, RULE_generalReservedWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (GRW_Exclamation - 58)) | (1L << (GRW_Underscore - 58)) | (1L << (GRW_As - 58)) | (1L << (GRW_Binary - 58)) | (1L << (GRW_Decimal - 58)) | (1L << (GRW_Exists - 58)) | (1L << (GRW_Hexadecimal - 58)) | (1L << (GRW_Forall - 58)) | (1L << (GRW_Let - 58)) | (1L << (GRW_Match - 58)) | (1L << (GRW_Numeral - 58)) | (1L << (GRW_Par - 58)) | (1L << (GRW_String - 58)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefSymbolContext predefSymbol() {
			return GetRuleContext<PredefSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UndefinedSymbol() { return GetToken(SMTLIBv2Parser.UndefinedSymbol, 0); }
		public SimpleSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSimpleSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSimpleSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSymbolContext simpleSymbol() {
		SimpleSymbolContext _localctx = new SimpleSymbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleSymbol);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				predefSymbol();
				}
				break;
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				Match(UndefinedSymbol);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedSymbol() { return GetToken(SMTLIBv2Parser.QuotedSymbol, 0); }
		public QuotedSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterQuotedSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitQuotedSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedSymbolContext quotedSymbol() {
		QuotedSymbolContext _localctx = new QuotedSymbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_quotedSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(QuotedSymbol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Not() { return GetToken(SMTLIBv2Parser.PS_Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Bool() { return GetToken(SMTLIBv2Parser.PS_Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ContinuedExecution() { return GetToken(SMTLIBv2Parser.PS_ContinuedExecution, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Error() { return GetToken(SMTLIBv2Parser.PS_Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_False() { return GetToken(SMTLIBv2Parser.PS_False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ImmediateExit() { return GetToken(SMTLIBv2Parser.PS_ImmediateExit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Incomplete() { return GetToken(SMTLIBv2Parser.PS_Incomplete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Logic() { return GetToken(SMTLIBv2Parser.PS_Logic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Memout() { return GetToken(SMTLIBv2Parser.PS_Memout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Sat() { return GetToken(SMTLIBv2Parser.PS_Sat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Success() { return GetToken(SMTLIBv2Parser.PS_Success, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Theory() { return GetToken(SMTLIBv2Parser.PS_Theory, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_True() { return GetToken(SMTLIBv2Parser.PS_True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unknown() { return GetToken(SMTLIBv2Parser.PS_Unknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsupported() { return GetToken(SMTLIBv2Parser.PS_Unsupported, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsat() { return GetToken(SMTLIBv2Parser.PS_Unsat, 0); }
		public PredefSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPredefSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPredefSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefSymbolContext predefSymbol() {
		PredefSymbolContext _localctx = new PredefSymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_predefSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AllStatistics() { return GetToken(SMTLIBv2Parser.PK_AllStatistics, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Category() { return GetToken(SMTLIBv2Parser.PK_Category, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Chainable() { return GetToken(SMTLIBv2Parser.PK_Chainable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Definition() { return GetToken(SMTLIBv2Parser.PK_Definition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_DiagnosticOutputChannel() { return GetToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Extension() { return GetToken(SMTLIBv2Parser.PK_Extension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Funs() { return GetToken(SMTLIBv2Parser.PK_Funs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_FunsDescription() { return GetToken(SMTLIBv2Parser.PK_FunsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_GlobalDeclarations() { return GetToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_InteractiveMode() { return GetToken(SMTLIBv2Parser.PK_InteractiveMode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Language() { return GetToken(SMTLIBv2Parser.PK_Language, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_LeftAssoc() { return GetToken(SMTLIBv2Parser.PK_LeftAssoc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_License() { return GetToken(SMTLIBv2Parser.PK_License, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Named() { return GetToken(SMTLIBv2Parser.PK_Named, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Pattern() { return GetToken(SMTLIBv2Parser.PK_Pattern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_PrintSuccess() { return GetToken(SMTLIBv2Parser.PK_PrintSuccess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssertions() { return GetToken(SMTLIBv2Parser.PK_ProduceAssertions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssignments() { return GetToken(SMTLIBv2Parser.PK_ProduceAssignments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceModels() { return GetToken(SMTLIBv2Parser.PK_ProduceModels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceProofs() { return GetToken(SMTLIBv2Parser.PK_ProduceProofs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatAssumptions() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatCores() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RandomSeed() { return GetToken(SMTLIBv2Parser.PK_RandomSeed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RegularOutputChannel() { return GetToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReproducibleResourceLimit() { return GetToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RightAssoc() { return GetToken(SMTLIBv2Parser.PK_RightAssoc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SmtLibVersion() { return GetToken(SMTLIBv2Parser.PK_SmtLibVersion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Sorts() { return GetToken(SMTLIBv2Parser.PK_Sorts, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SortsDescription() { return GetToken(SMTLIBv2Parser.PK_SortsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Source() { return GetToken(SMTLIBv2Parser.PK_Source, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Status() { return GetToken(SMTLIBv2Parser.PK_Status, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Theories() { return GetToken(SMTLIBv2Parser.PK_Theories, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Verbosity() { return GetToken(SMTLIBv2Parser.PK_Verbosity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		public PredefKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPredefKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPredefKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefKeywordContext predefKeyword() {
		PredefKeywordContext _localctx = new PredefKeywordContext(Context, State);
		EnterRule(_localctx, 12, RULE_predefKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (PK_AllStatistics - 76)) | (1L << (PK_AssertionStackLevels - 76)) | (1L << (PK_Authors - 76)) | (1L << (PK_Category - 76)) | (1L << (PK_Chainable - 76)) | (1L << (PK_Definition - 76)) | (1L << (PK_DiagnosticOutputChannel - 76)) | (1L << (PK_ErrorBehaviour - 76)) | (1L << (PK_Extension - 76)) | (1L << (PK_Funs - 76)) | (1L << (PK_FunsDescription - 76)) | (1L << (PK_GlobalDeclarations - 76)) | (1L << (PK_InteractiveMode - 76)) | (1L << (PK_Language - 76)) | (1L << (PK_LeftAssoc - 76)) | (1L << (PK_License - 76)) | (1L << (PK_Named - 76)) | (1L << (PK_Name - 76)) | (1L << (PK_Notes - 76)) | (1L << (PK_Pattern - 76)) | (1L << (PK_PrintSuccess - 76)) | (1L << (PK_ProduceAssertions - 76)) | (1L << (PK_ProduceAssignments - 76)) | (1L << (PK_ProduceModels - 76)) | (1L << (PK_ProduceProofs - 76)) | (1L << (PK_ProduceUnsatAssumptions - 76)) | (1L << (PK_ProduceUnsatCores - 76)) | (1L << (PK_RandomSeed - 76)) | (1L << (PK_ReasonUnknown - 76)) | (1L << (PK_RegularOutputChannel - 76)) | (1L << (PK_ReproducibleResourceLimit - 76)) | (1L << (PK_RightAssoc - 76)) | (1L << (PK_SmtLibVersion - 76)) | (1L << (PK_Sorts - 76)) | (1L << (PK_SortsDescription - 76)) | (1L << (PK_Source - 76)) | (1L << (PK_Status - 76)) | (1L << (PK_Theories - 76)) | (1L << (PK_Values - 76)) | (1L << (PK_Verbosity - 76)) | (1L << (PK_Version - 76)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSymbolContext simpleSymbol() {
			return GetRuleContext<SimpleSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuotedSymbolContext quotedSymbol() {
			return GetRuleContext<QuotedSymbolContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				simpleSymbol();
				}
				break;
			case QuotedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				quotedSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(SMTLIBv2Parser.Numeral, 0); }
		public NumeralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralContext numeral() {
		NumeralContext _localctx = new NumeralContext(Context, State);
		EnterRule(_localctx, 16, RULE_numeral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(Numeral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(SMTLIBv2Parser.Decimal, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 18, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(Decimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexDecimal() { return GetToken(SMTLIBv2Parser.HexDecimal, 0); }
		public HexadecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterHexadecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitHexadecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalContext hexadecimal() {
		HexadecimalContext _localctx = new HexadecimalContext(Context, State);
		EnterRule(_localctx, 20, RULE_hexadecimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(HexDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary() { return GetToken(SMTLIBv2Parser.Binary, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 22, RULE_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(Binary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SMTLIBv2Parser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 24, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefKeywordContext predefKeyword() {
			return GetRuleContext<PredefKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SMTLIBv2Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSymbolContext simpleSymbol() {
			return GetRuleContext<SimpleSymbolContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 26, RULE_keyword);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PK_AllStatistics:
			case PK_AssertionStackLevels:
			case PK_Authors:
			case PK_Category:
			case PK_Chainable:
			case PK_Definition:
			case PK_DiagnosticOutputChannel:
			case PK_ErrorBehaviour:
			case PK_Extension:
			case PK_Funs:
			case PK_FunsDescription:
			case PK_GlobalDeclarations:
			case PK_InteractiveMode:
			case PK_Language:
			case PK_LeftAssoc:
			case PK_License:
			case PK_Named:
			case PK_Name:
			case PK_Notes:
			case PK_Pattern:
			case PK_PrintSuccess:
			case PK_ProduceAssertions:
			case PK_ProduceAssignments:
			case PK_ProduceModels:
			case PK_ProduceProofs:
			case PK_ProduceUnsatAssumptions:
			case PK_ProduceUnsatCores:
			case PK_RandomSeed:
			case PK_ReasonUnknown:
			case PK_RegularOutputChannel:
			case PK_ReproducibleResourceLimit:
			case PK_RightAssoc:
			case PK_SmtLibVersion:
			case PK_Sorts:
			case PK_SortsDescription:
			case PK_Source:
			case PK_Status:
			case PK_Theories:
			case PK_Values:
			case PK_Verbosity:
			case PK_Version:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				predefKeyword();
				}
				break;
			case Colon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				Match(Colon);
				State = 244;
				simpleSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Spec_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalContext hexadecimal() {
			return GetRuleContext<HexadecimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Spec_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSpec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSpec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpec_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Spec_constantContext spec_constant() {
		Spec_constantContext _localctx = new Spec_constantContext(Context, State);
		EnterRule(_localctx, 28, RULE_spec_constant);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				numeral();
				}
				break;
			case Decimal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				@decimal();
				}
				break;
			case HexDecimal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249;
				hexadecimal();
				}
				break;
			case Binary:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250;
				binary();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class S_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext[] s_expr() {
			return GetRuleContexts<S_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr(int i) {
			return GetRuleContext<S_exprContext>(i);
		}
		public S_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterS_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitS_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public S_exprContext s_expr() {
		S_exprContext _localctx = new S_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_s_expr);
		int _la;
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
			case Numeral:
			case Binary:
			case HexDecimal:
			case Decimal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				spec_constant();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				symbol();
				}
				break;
			case Colon:
			case PK_AllStatistics:
			case PK_AssertionStackLevels:
			case PK_Authors:
			case PK_Category:
			case PK_Chainable:
			case PK_Definition:
			case PK_DiagnosticOutputChannel:
			case PK_ErrorBehaviour:
			case PK_Extension:
			case PK_Funs:
			case PK_FunsDescription:
			case PK_GlobalDeclarations:
			case PK_InteractiveMode:
			case PK_Language:
			case PK_LeftAssoc:
			case PK_License:
			case PK_Named:
			case PK_Name:
			case PK_Notes:
			case PK_Pattern:
			case PK_PrintSuccess:
			case PK_ProduceAssertions:
			case PK_ProduceAssignments:
			case PK_ProduceModels:
			case PK_ProduceProofs:
			case PK_ProduceUnsatAssumptions:
			case PK_ProduceUnsatCores:
			case PK_RandomSeed:
			case PK_ReasonUnknown:
			case PK_RegularOutputChannel:
			case PK_ReproducibleResourceLimit:
			case PK_RightAssoc:
			case PK_SmtLibVersion:
			case PK_Sorts:
			case PK_SortsDescription:
			case PK_Source:
			case PK_Status:
			case PK_Theories:
			case PK_Values:
			case PK_Verbosity:
			case PK_Version:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				keyword();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257;
				Match(ParOpen);
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)) | (1L << (UndefinedSymbol - 71)))) != 0)) {
					{
					{
					State = 258;
					s_expr();
					}
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 264;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 32, RULE_index);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				numeral();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Underscore() { return GetToken(SMTLIBv2Parser.GRW_Underscore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifier);
		int _la;
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				Match(ParOpen);
				State = 273;
				Match(GRW_Underscore);
				State = 274;
				symbol();
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 275;
					index();
					}
					}
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==Numeral || _la==UndefinedSymbol );
				State = 280;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext[] s_expr() {
			return GetRuleContexts<S_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr(int i) {
			return GetRuleContext<S_exprContext>(i);
		}
		public Attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterAttribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitAttribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_valueContext attribute_value() {
		Attribute_valueContext _localctx = new Attribute_valueContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute_value);
		int _la;
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
			case Numeral:
			case Binary:
			case HexDecimal:
			case Decimal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				spec_constant();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				Match(ParOpen);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)) | (1L << (UndefinedSymbol - 71)))) != 0)) {
					{
					{
					State = 287;
					s_expr();
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 293;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext attribute_value() {
			return GetRuleContext<Attribute_valueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				keyword();
				State = 298;
				attribute_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		public SortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortContext sort() {
		SortContext _localctx = new SortContext(Context, State);
		EnterRule(_localctx, 40, RULE_sort);
		int _la;
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				Match(ParOpen);
				State = 304;
				identifier();
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 305;
					sort();
					}
					}
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 310;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_As() { return GetToken(SMTLIBv2Parser.GRW_As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Qual_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterQual_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitQual_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qual_identifierContext qual_identifier() {
		Qual_identifierContext _localctx = new Qual_identifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_qual_identifier);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(ParOpen);
				State = 316;
				Match(GRW_As);
				State = 317;
				identifier();
				State = 318;
				sort();
				State = 319;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Var_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterVar_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitVar_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_bindingContext var_binding() {
		Var_bindingContext _localctx = new Var_bindingContext(Context, State);
		EnterRule(_localctx, 44, RULE_var_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(ParOpen);
			State = 324;
			symbol();
			State = 325;
			term();
			State = 326;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Sorted_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSorted_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSorted_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSorted_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_varContext sorted_var() {
		Sorted_varContext _localctx = new Sorted_varContext(Context, State);
		EnterRule(_localctx, 46, RULE_sorted_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(ParOpen);
			State = 329;
			symbol();
			State = 330;
			sort();
			State = 331;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 48, RULE_pattern);
		int _la;
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(ParOpen);
				State = 335;
				symbol();
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 336;
					symbol();
					}
					}
					State = 339;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 341;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Match_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterMatch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitMatch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_caseContext match_case() {
		Match_caseContext _localctx = new Match_caseContext(Context, State);
		EnterRule(_localctx, 50, RULE_match_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(ParOpen);
			State = 346;
			pattern();
			State = 347;
			term();
			State = 348;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_identifierContext qual_identifier() {
			return GetRuleContext<Qual_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Let() { return GetToken(SMTLIBv2Parser.GRW_Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_bindingContext[] var_binding() {
			return GetRuleContexts<Var_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_bindingContext var_binding(int i) {
			return GetRuleContext<Var_bindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Forall() { return GetToken(SMTLIBv2Parser.GRW_Forall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exists() { return GetToken(SMTLIBv2Parser.GRW_Exists, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Match() { return GetToken(SMTLIBv2Parser.GRW_Match, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_caseContext[] match_case() {
			return GetRuleContexts<Match_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_caseContext match_case(int i) {
			return GetRuleContext<Match_caseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exclamation() { return GetToken(SMTLIBv2Parser.GRW_Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 52, RULE_term);
		int _la;
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				spec_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				qual_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352;
				Match(ParOpen);
				State = 353;
				qual_identifier();
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 354;
					term();
					}
					}
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0) );
				State = 359;
				Match(ParClose);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361;
				Match(ParOpen);
				State = 362;
				Match(GRW_Let);
				State = 363;
				Match(ParOpen);
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 364;
					var_binding();
					}
					}
					State = 367;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 369;
				Match(ParClose);
				State = 370;
				term();
				State = 371;
				Match(ParClose);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 373;
				Match(ParOpen);
				State = 374;
				Match(GRW_Forall);
				State = 375;
				Match(ParOpen);
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 376;
					sorted_var();
					}
					}
					State = 379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 381;
				Match(ParClose);
				State = 382;
				term();
				State = 383;
				Match(ParClose);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 385;
				Match(ParOpen);
				State = 386;
				Match(GRW_Exists);
				State = 387;
				Match(ParOpen);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 388;
					sorted_var();
					}
					}
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 393;
				Match(ParClose);
				State = 394;
				term();
				State = 395;
				Match(ParClose);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 397;
				Match(ParOpen);
				State = 398;
				Match(GRW_Match);
				State = 399;
				term();
				State = 400;
				Match(ParOpen);
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 401;
					match_case();
					}
					}
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 406;
				Match(ParClose);
				State = 407;
				Match(ParClose);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 409;
				Match(ParOpen);
				State = 410;
				Match(GRW_Exclamation);
				State = 411;
				term();
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 412;
					attribute();
					}
					}
					State = 415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0) );
				State = 417;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Sort_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_symbol_declContext sort_symbol_decl() {
		Sort_symbol_declContext _localctx = new Sort_symbol_declContext(Context, State);
		EnterRule(_localctx, 54, RULE_sort_symbol_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(ParOpen);
			State = 422;
			identifier();
			State = 423;
			numeral();
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0)) {
				{
				{
				State = 424;
				attribute();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 430;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_spec_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Numeral() { return GetToken(SMTLIBv2Parser.GRW_Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Decimal() { return GetToken(SMTLIBv2Parser.GRW_Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_String() { return GetToken(SMTLIBv2Parser.GRW_String, 0); }
		public Meta_spec_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_spec_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterMeta_spec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitMeta_spec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_spec_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_spec_constantContext meta_spec_constant() {
		Meta_spec_constantContext _localctx = new Meta_spec_constantContext(Context, State);
		EnterRule(_localctx, 56, RULE_meta_spec_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (GRW_Decimal - 62)) | (1L << (GRW_Numeral - 62)) | (1L << (GRW_String - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fun_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_spec_constantContext meta_spec_constant() {
			return GetRuleContext<Meta_spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Fun_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fun_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFun_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fun_symbol_declContext fun_symbol_decl() {
		Fun_symbol_declContext _localctx = new Fun_symbol_declContext(Context, State);
		EnterRule(_localctx, 58, RULE_fun_symbol_decl);
		int _la;
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				Match(ParOpen);
				State = 435;
				spec_constant();
				State = 436;
				sort();
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0)) {
					{
					{
					State = 437;
					attribute();
					}
					}
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 443;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				Match(ParOpen);
				State = 446;
				meta_spec_constant();
				State = 447;
				sort();
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0)) {
					{
					{
					State = 448;
					attribute();
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 454;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456;
				Match(ParOpen);
				State = 457;
				identifier();
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 458;
					sort();
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0)) {
					{
					{
					State = 463;
					attribute();
					}
					}
					State = 468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 469;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Par_fun_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fun_symbol_declContext fun_symbol_decl() {
			return GetRuleContext<Fun_symbol_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Par_fun_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_par_fun_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPar_fun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPar_fun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar_fun_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Par_fun_symbol_declContext par_fun_symbol_decl() {
		Par_fun_symbol_declContext _localctx = new Par_fun_symbol_declContext(Context, State);
		EnterRule(_localctx, 60, RULE_par_fun_symbol_decl);
		int _la;
		try {
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				fun_symbol_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474;
				Match(ParOpen);
				State = 475;
				Match(GRW_Par);
				State = 476;
				Match(ParOpen);
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 477;
					symbol();
					}
					}
					State = 480;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 482;
				Match(ParClose);
				State = 483;
				Match(ParOpen);
				State = 484;
				identifier();
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 485;
					sort();
					}
					}
					State = 488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0)) {
					{
					{
					State = 490;
					attribute();
					}
					}
					State = 495;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 496;
				Match(ParClose);
				State = 497;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Theory_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Sorts() { return GetToken(SMTLIBv2Parser.PK_Sorts, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_symbol_declContext[] sort_symbol_decl() {
			return GetRuleContexts<Sort_symbol_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_symbol_declContext sort_symbol_decl(int i) {
			return GetRuleContext<Sort_symbol_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Funs() { return GetToken(SMTLIBv2Parser.PK_Funs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Par_fun_symbol_declContext[] par_fun_symbol_decl() {
			return GetRuleContexts<Par_fun_symbol_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Par_fun_symbol_declContext par_fun_symbol_decl(int i) {
			return GetRuleContext<Par_fun_symbol_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SortsDescription() { return GetToken(SMTLIBv2Parser.PK_SortsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_FunsDescription() { return GetToken(SMTLIBv2Parser.PK_FunsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Definition() { return GetToken(SMTLIBv2Parser.PK_Definition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Theory_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTheory_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTheory_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Theory_attributeContext theory_attribute() {
		Theory_attributeContext _localctx = new Theory_attributeContext(Context, State);
		EnterRule(_localctx, 62, RULE_theory_attribute);
		int _la;
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				Match(PK_Sorts);
				State = 502;
				Match(ParOpen);
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 503;
					sort_symbol_decl();
					}
					}
					State = 506;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 508;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				Match(PK_Funs);
				State = 511;
				Match(ParOpen);
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 512;
					par_fun_symbol_decl();
					}
					}
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 517;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 519;
				Match(PK_SortsDescription);
				State = 520;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 521;
				Match(PK_FunsDescription);
				State = 522;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 523;
				Match(PK_Definition);
				State = 524;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525;
				Match(PK_Values);
				State = 526;
				@string();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 527;
				Match(PK_Notes);
				State = 528;
				@string();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 529;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Theory_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Theory() { return GetToken(SMTLIBv2Parser.PS_Theory, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Theory_attributeContext[] theory_attribute() {
			return GetRuleContexts<Theory_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Theory_attributeContext theory_attribute(int i) {
			return GetRuleContext<Theory_attributeContext>(i);
		}
		public Theory_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTheory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTheory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Theory_declContext theory_decl() {
		Theory_declContext _localctx = new Theory_declContext(Context, State);
		EnterRule(_localctx, 64, RULE_theory_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(ParOpen);
			State = 533;
			Match(PS_Theory);
			State = 534;
			symbol();
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 535;
				theory_attribute();
				}
				}
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0) );
			State = 540;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_attribueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Theories() { return GetToken(SMTLIBv2Parser.PK_Theories, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Language() { return GetToken(SMTLIBv2Parser.PK_Language, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Extension() { return GetToken(SMTLIBv2Parser.PK_Extension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Logic_attribueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_attribue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterLogic_attribue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitLogic_attribue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_attribue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_attribueContext logic_attribue() {
		Logic_attribueContext _localctx = new Logic_attribueContext(Context, State);
		EnterRule(_localctx, 66, RULE_logic_attribue);
		int _la;
		try {
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				Match(PK_Theories);
				State = 543;
				Match(ParOpen);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 544;
					symbol();
					}
					}
					State = 547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 549;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 551;
				Match(PK_Language);
				State = 552;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 553;
				Match(PK_Extension);
				State = 554;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 555;
				Match(PK_Values);
				State = 556;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 557;
				Match(PK_Notes);
				State = 558;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 559;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Logic() { return GetToken(SMTLIBv2Parser.PS_Logic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logic_attribueContext[] logic_attribue() {
			return GetRuleContexts<Logic_attribueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logic_attribueContext logic_attribue(int i) {
			return GetRuleContext<Logic_attribueContext>(i);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 68, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(ParOpen);
			State = 563;
			Match(PS_Logic);
			State = 564;
			symbol();
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 565;
				logic_attribue();
				}
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0) );
			State = 570;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Sort_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_decContext sort_dec() {
		Sort_decContext _localctx = new Sort_decContext(Context, State);
		EnterRule(_localctx, 70, RULE_sort_dec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(ParOpen);
			State = 573;
			symbol();
			State = 574;
			numeral();
			State = 575;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Selector_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSelector_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSelector_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_decContext selector_dec() {
		Selector_decContext _localctx = new Selector_decContext(Context, State);
		EnterRule(_localctx, 72, RULE_selector_dec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(ParOpen);
			State = 578;
			symbol();
			State = 579;
			sort();
			State = 580;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_decContext[] selector_dec() {
			return GetRuleContexts<Selector_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_decContext selector_dec(int i) {
			return GetRuleContext<Selector_decContext>(i);
		}
		public Constructor_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterConstructor_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitConstructor_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_decContext constructor_dec() {
		Constructor_decContext _localctx = new Constructor_decContext(Context, State);
		EnterRule(_localctx, 74, RULE_constructor_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(ParOpen);
			State = 583;
			symbol();
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 584;
				selector_dec();
				}
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_decContext[] constructor_dec() {
			return GetRuleContexts<Constructor_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_decContext constructor_dec(int i) {
			return GetRuleContext<Constructor_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Datatype_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterDatatype_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitDatatype_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_decContext datatype_dec() {
		Datatype_decContext _localctx = new Datatype_decContext(Context, State);
		EnterRule(_localctx, 76, RULE_datatype_dec);
		int _la;
		try {
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				Match(ParOpen);
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 593;
					constructor_dec();
					}
					}
					State = 596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 598;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600;
				Match(ParOpen);
				State = 601;
				Match(GRW_Par);
				State = 602;
				Match(ParOpen);
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 603;
					symbol();
					}
					}
					State = 606;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 608;
				Match(ParClose);
				State = 609;
				Match(ParOpen);
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 610;
					constructor_dec();
					}
					}
					State = 613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 615;
				Match(ParClose);
				State = 616;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		public Function_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFunction_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFunction_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_decContext function_dec() {
		Function_decContext _localctx = new Function_decContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(ParOpen);
			State = 621;
			symbol();
			State = 622;
			Match(ParOpen);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 623;
				sorted_var();
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 629;
			Match(ParClose);
			State = 630;
			sort();
			State = 631;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 80, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			symbol();
			State = 634;
			Match(ParOpen);
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 635;
				sorted_var();
				}
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 641;
			Match(ParClose);
			State = 642;
			sort();
			State = 643;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prop_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Not() { return GetToken(SMTLIBv2Parser.PS_Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Prop_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterProp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitProp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prop_literalContext prop_literal() {
		Prop_literalContext _localctx = new Prop_literalContext(Context, State);
		EnterRule(_localctx, 82, RULE_prop_literal);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646;
				Match(ParOpen);
				State = 647;
				Match(PS_Not);
				State = 648;
				symbol();
				State = 649;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 84, RULE_script);
		int _la;
		try {
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ParOpen) {
					{
					{
					State = 653;
					command();
					}
					}
					State = 658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				Match(ParOpen);
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ParOpen) {
					{
					{
					State = 660;
					command();
					}
					}
					State = 665;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 666;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Asserted() { return GetToken(SMTLIBv2Parser.CMD_Asserted, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public AssertedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asserted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterAsserted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitAsserted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsserted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertedContext asserted() {
		AssertedContext _localctx = new AssertedContext(Context, State);
		EnterRule(_localctx, 86, RULE_asserted);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(ParOpen);
			State = 670;
			Match(CMD_Asserted);
			State = 671;
			term();
			State = 672;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Assert() { return GetToken(SMTLIBv2Parser.CMD_Assert, 0); }
		public Cmd_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_assert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_assertContext cmd_assert() {
		Cmd_assertContext _localctx = new Cmd_assertContext(Context, State);
		EnterRule(_localctx, 88, RULE_cmd_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(CMD_Assert);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checkSatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_CheckSat() { return GetToken(SMTLIBv2Parser.CMD_CheckSat, 0); }
		public Cmd_checkSatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checkSat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_checkSat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_checkSat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checkSat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checkSatContext cmd_checkSat() {
		Cmd_checkSatContext _localctx = new Cmd_checkSatContext(Context, State);
		EnterRule(_localctx, 90, RULE_cmd_checkSat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(CMD_CheckSat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checkSatAssumingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_CheckSatAssuming() { return GetToken(SMTLIBv2Parser.CMD_CheckSatAssuming, 0); }
		public Cmd_checkSatAssumingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checkSatAssuming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_checkSatAssuming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_checkSatAssuming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checkSatAssuming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checkSatAssumingContext cmd_checkSatAssuming() {
		Cmd_checkSatAssumingContext _localctx = new Cmd_checkSatAssumingContext(Context, State);
		EnterRule(_localctx, 92, RULE_cmd_checkSatAssuming);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(CMD_CheckSatAssuming);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareConst() { return GetToken(SMTLIBv2Parser.CMD_DeclareConst, 0); }
		public Cmd_declareConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareConst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareConstContext cmd_declareConst() {
		Cmd_declareConstContext _localctx = new Cmd_declareConstContext(Context, State);
		EnterRule(_localctx, 94, RULE_cmd_declareConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(CMD_DeclareConst);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareDatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareDatatype() { return GetToken(SMTLIBv2Parser.CMD_DeclareDatatype, 0); }
		public Cmd_declareDatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareDatatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareDatatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareDatatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareDatatypeContext cmd_declareDatatype() {
		Cmd_declareDatatypeContext _localctx = new Cmd_declareDatatypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_cmd_declareDatatype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(CMD_DeclareDatatype);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareDatatypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareDatatypes() { return GetToken(SMTLIBv2Parser.CMD_DeclareDatatypes, 0); }
		public Cmd_declareDatatypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareDatatypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareDatatypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareDatatypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareDatatypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareDatatypesContext cmd_declareDatatypes() {
		Cmd_declareDatatypesContext _localctx = new Cmd_declareDatatypesContext(Context, State);
		EnterRule(_localctx, 98, RULE_cmd_declareDatatypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(CMD_DeclareDatatypes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareFunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareFun() { return GetToken(SMTLIBv2Parser.CMD_DeclareFun, 0); }
		public Cmd_declareFunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareFun; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareFun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareFunContext cmd_declareFun() {
		Cmd_declareFunContext _localctx = new Cmd_declareFunContext(Context, State);
		EnterRule(_localctx, 100, RULE_cmd_declareFun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(CMD_DeclareFun);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareSortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareSort() { return GetToken(SMTLIBv2Parser.CMD_DeclareSort, 0); }
		public Cmd_declareSortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareSort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareSortContext cmd_declareSort() {
		Cmd_declareSortContext _localctx = new Cmd_declareSortContext(Context, State);
		EnterRule(_localctx, 102, RULE_cmd_declareSort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(CMD_DeclareSort);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFun() { return GetToken(SMTLIBv2Parser.CMD_DefineFun, 0); }
		public Cmd_defineFunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFun; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunContext cmd_defineFun() {
		Cmd_defineFunContext _localctx = new Cmd_defineFunContext(Context, State);
		EnterRule(_localctx, 104, RULE_cmd_defineFun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(CMD_DefineFun);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunRecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunRec, 0); }
		public Cmd_defineFunRecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFunRec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFunRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFunRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFunRec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunRecContext cmd_defineFunRec() {
		Cmd_defineFunRecContext _localctx = new Cmd_defineFunRecContext(Context, State);
		EnterRule(_localctx, 106, RULE_cmd_defineFunRec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(CMD_DefineFunRec);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunsRecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunsRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0); }
		public Cmd_defineFunsRecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFunsRec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFunsRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFunsRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFunsRec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunsRecContext cmd_defineFunsRec() {
		Cmd_defineFunsRecContext _localctx = new Cmd_defineFunsRecContext(Context, State);
		EnterRule(_localctx, 108, RULE_cmd_defineFunsRec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(CMD_DefineFunsRec);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineSortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineSort() { return GetToken(SMTLIBv2Parser.CMD_DefineSort, 0); }
		public Cmd_defineSortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineSort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineSortContext cmd_defineSort() {
		Cmd_defineSortContext _localctx = new Cmd_defineSortContext(Context, State);
		EnterRule(_localctx, 110, RULE_cmd_defineSort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(CMD_DefineSort);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_echoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Echo() { return GetToken(SMTLIBv2Parser.CMD_Echo, 0); }
		public Cmd_echoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_echo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_echo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_echo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_echo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_echoContext cmd_echo() {
		Cmd_echoContext _localctx = new Cmd_echoContext(Context, State);
		EnterRule(_localctx, 112, RULE_cmd_echo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(CMD_Echo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_exitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Exit() { return GetToken(SMTLIBv2Parser.CMD_Exit, 0); }
		public Cmd_exitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_exit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_exitContext cmd_exit() {
		Cmd_exitContext _localctx = new Cmd_exitContext(Context, State);
		EnterRule(_localctx, 114, RULE_cmd_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			Match(CMD_Exit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getAssertionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetAssertions() { return GetToken(SMTLIBv2Parser.CMD_GetAssertions, 0); }
		public Cmd_getAssertionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getAssertions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getAssertions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getAssertionsContext cmd_getAssertions() {
		Cmd_getAssertionsContext _localctx = new Cmd_getAssertionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_cmd_getAssertions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(CMD_GetAssertions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetAssignment() { return GetToken(SMTLIBv2Parser.CMD_GetAssignment, 0); }
		public Cmd_getAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getAssignmentContext cmd_getAssignment() {
		Cmd_getAssignmentContext _localctx = new Cmd_getAssignmentContext(Context, State);
		EnterRule(_localctx, 118, RULE_cmd_getAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(CMD_GetAssignment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetInfo() { return GetToken(SMTLIBv2Parser.CMD_GetInfo, 0); }
		public Cmd_getInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getInfoContext cmd_getInfo() {
		Cmd_getInfoContext _localctx = new Cmd_getInfoContext(Context, State);
		EnterRule(_localctx, 120, RULE_cmd_getInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(CMD_GetInfo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetModel() { return GetToken(SMTLIBv2Parser.CMD_GetModel, 0); }
		public Cmd_getModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getModel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getModelContext cmd_getModel() {
		Cmd_getModelContext _localctx = new Cmd_getModelContext(Context, State);
		EnterRule(_localctx, 122, RULE_cmd_getModel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(CMD_GetModel);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetOption() { return GetToken(SMTLIBv2Parser.CMD_GetOption, 0); }
		public Cmd_getOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getOptionContext cmd_getOption() {
		Cmd_getOptionContext _localctx = new Cmd_getOptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_cmd_getOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(CMD_GetOption);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getProofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetProof() { return GetToken(SMTLIBv2Parser.CMD_GetProof, 0); }
		public Cmd_getProofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getProof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getProof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getProofContext cmd_getProof() {
		Cmd_getProofContext _localctx = new Cmd_getProofContext(Context, State);
		EnterRule(_localctx, 126, RULE_cmd_getProof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(CMD_GetProof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getUnsatAssumptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetUnsatAssumptions() { return GetToken(SMTLIBv2Parser.CMD_GetUnsatAssumptions, 0); }
		public Cmd_getUnsatAssumptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getUnsatAssumptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getUnsatAssumptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getUnsatAssumptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getUnsatAssumptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getUnsatAssumptionsContext cmd_getUnsatAssumptions() {
		Cmd_getUnsatAssumptionsContext _localctx = new Cmd_getUnsatAssumptionsContext(Context, State);
		EnterRule(_localctx, 128, RULE_cmd_getUnsatAssumptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(CMD_GetUnsatAssumptions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getUnsatCoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetUnsatCore() { return GetToken(SMTLIBv2Parser.CMD_GetUnsatCore, 0); }
		public Cmd_getUnsatCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getUnsatCore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getUnsatCore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getUnsatCore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getUnsatCore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getUnsatCoreContext cmd_getUnsatCore() {
		Cmd_getUnsatCoreContext _localctx = new Cmd_getUnsatCoreContext(Context, State);
		EnterRule(_localctx, 130, RULE_cmd_getUnsatCore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(CMD_GetUnsatCore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetValue() { return GetToken(SMTLIBv2Parser.CMD_GetValue, 0); }
		public Cmd_getValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getValueContext cmd_getValue() {
		Cmd_getValueContext _localctx = new Cmd_getValueContext(Context, State);
		EnterRule(_localctx, 132, RULE_cmd_getValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(CMD_GetValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_lemmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Lemma() { return GetToken(SMTLIBv2Parser.CMD_Lemma, 0); }
		public Cmd_lemmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_lemma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_lemma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_lemma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_lemma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_lemmaContext cmd_lemma() {
		Cmd_lemmaContext _localctx = new Cmd_lemmaContext(Context, State);
		EnterRule(_localctx, 134, RULE_cmd_lemma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			Match(CMD_Lemma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_popContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Pop() { return GetToken(SMTLIBv2Parser.CMD_Pop, 0); }
		public Cmd_popContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_pop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_pop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_pop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_pop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_popContext cmd_pop() {
		Cmd_popContext _localctx = new Cmd_popContext(Context, State);
		EnterRule(_localctx, 136, RULE_cmd_pop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(CMD_Pop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_pushContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Push() { return GetToken(SMTLIBv2Parser.CMD_Push, 0); }
		public Cmd_pushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_push(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_push(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_push(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_pushContext cmd_push() {
		Cmd_pushContext _localctx = new Cmd_pushContext(Context, State);
		EnterRule(_localctx, 138, RULE_cmd_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(CMD_Push);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Reset() { return GetToken(SMTLIBv2Parser.CMD_Reset, 0); }
		public Cmd_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_reset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_resetContext cmd_reset() {
		Cmd_resetContext _localctx = new Cmd_resetContext(Context, State);
		EnterRule(_localctx, 140, RULE_cmd_reset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(CMD_Reset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_resetAssertionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_ResetAssertions() { return GetToken(SMTLIBv2Parser.CMD_ResetAssertions, 0); }
		public Cmd_resetAssertionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_resetAssertions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_resetAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_resetAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_resetAssertions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_resetAssertionsContext cmd_resetAssertions() {
		Cmd_resetAssertionsContext _localctx = new Cmd_resetAssertionsContext(Context, State);
		EnterRule(_localctx, 142, RULE_cmd_resetAssertions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(CMD_ResetAssertions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetInfo() { return GetToken(SMTLIBv2Parser.CMD_SetInfo, 0); }
		public Cmd_setInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setInfoContext cmd_setInfo() {
		Cmd_setInfoContext _localctx = new Cmd_setInfoContext(Context, State);
		EnterRule(_localctx, 144, RULE_cmd_setInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(CMD_SetInfo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetLogic() { return GetToken(SMTLIBv2Parser.CMD_SetLogic, 0); }
		public Cmd_setLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setLogicContext cmd_setLogic() {
		Cmd_setLogicContext _localctx = new Cmd_setLogicContext(Context, State);
		EnterRule(_localctx, 146, RULE_cmd_setLogic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			Match(CMD_SetLogic);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetOption() { return GetToken(SMTLIBv2Parser.CMD_SetOption, 0); }
		public Cmd_setOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setOptionContext cmd_setOption() {
		Cmd_setOptionContext _localctx = new Cmd_setOptionContext(Context, State);
		EnterRule(_localctx, 148, RULE_cmd_setOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(CMD_SetOption);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_hyperResContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_HyperRes() { return GetToken(SMTLIBv2Parser.CMD_HyperRes, 0); }
		public Cmd_hyperResContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_hyperRes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_hyperRes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_hyperRes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_hyperRes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_hyperResContext cmd_hyperRes() {
		Cmd_hyperResContext _localctx = new Cmd_hyperResContext(Context, State);
		EnterRule(_localctx, 150, RULE_cmd_hyperRes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(CMD_HyperRes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_mpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Mp() { return GetToken(SMTLIBv2Parser.CMD_Mp, 0); }
		public Cmd_mpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_mp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_mp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_mp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_mp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_mpContext cmd_mp() {
		Cmd_mpContext _localctx = new Cmd_mpContext(Context, State);
		EnterRule(_localctx, 152, RULE_cmd_mp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(CMD_Mp);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_proofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Proof() { return GetToken(SMTLIBv2Parser.CMD_Proof, 0); }
		public Cmd_proofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_proof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_proof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_proof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_proof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_proofContext cmd_proof() {
		Cmd_proofContext _localctx = new Cmd_proofContext(Context, State);
		EnterRule(_localctx, 154, RULE_cmd_proof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(CMD_Proof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_predicatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Cmd_predicatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_predicat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_predicat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_predicat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_predicat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_predicatContext cmd_predicat() {
		Cmd_predicatContext _localctx = new Cmd_predicatContext(Context, State);
		EnterRule(_localctx, 156, RULE_cmd_predicat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Args_predicatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Args_predicatContext args_predicat() {
			return GetRuleContext<Args_predicatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Args_predicatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args_predicat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterArgs_predicat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitArgs_predicat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs_predicat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Args_predicatContext args_predicat() {
		Args_predicatContext _localctx = new Args_predicatContext(Context, State);
		EnterRule(_localctx, 158, RULE_args_predicat);
		int _la;
		try {
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 744;
					term();
					}
					}
					State = 747;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0) );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749;
				Match(ParOpen);
				State = 750;
				args_predicat();
				State = 751;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hyper_proofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_hyperResContext cmd_hyperRes() {
			return GetRuleContext<Cmd_hyperResContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertedContext asserted() {
			return GetRuleContext<AssertedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hyper_proofContext[] hyper_proof() {
			return GetRuleContexts<Hyper_proofContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hyper_proofContext hyper_proof(int i) {
			return GetRuleContext<Hyper_proofContext>(i);
		}
		public Hyper_proofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hyper_proof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterHyper_proof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitHyper_proof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHyper_proof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hyper_proofContext hyper_proof() {
		Hyper_proofContext _localctx = new Hyper_proofContext(Context, State);
		EnterRule(_localctx, 160, RULE_hyper_proof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(ParOpen);
			State = 756;
			Match(ParOpen);
			State = 757;
			cmd_hyperRes();
			State = 758;
			Match(ParClose);
			State = 759;
			asserted();
			State = 763;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 760;
					hyper_proof();
					}
					} 
				}
				State = 765;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 766;
			term();
			State = 767;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_mpContext cmd_mp() {
			return GetRuleContext<Cmd_mpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hyper_proofContext hyper_proof() {
			return GetRuleContext<Hyper_proofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertedContext asserted() {
			return GetRuleContext<AssertedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ProofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProofContext proof() {
		ProofContext _localctx = new ProofContext(Context, State);
		EnterRule(_localctx, 162, RULE_proof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			cmd_mp();
			State = 770;
			hyper_proof();
			State = 771;
			asserted();
			State = 772;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_proofContext cmd_proof() {
			return GetRuleContext<Cmd_proofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProofContext proof() {
			return GetRuleContext<ProofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_assertContext cmd_assert() {
			return GetRuleContext<Cmd_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checkSatContext cmd_checkSat() {
			return GetRuleContext<Cmd_checkSatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checkSatAssumingContext cmd_checkSatAssuming() {
			return GetRuleContext<Cmd_checkSatAssumingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareConstContext cmd_declareConst() {
			return GetRuleContext<Cmd_declareConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareDatatypeContext cmd_declareDatatype() {
			return GetRuleContext<Cmd_declareDatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datatype_decContext[] datatype_dec() {
			return GetRuleContexts<Datatype_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datatype_decContext datatype_dec(int i) {
			return GetRuleContext<Datatype_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareDatatypesContext cmd_declareDatatypes() {
			return GetRuleContext<Cmd_declareDatatypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_decContext[] sort_dec() {
			return GetRuleContexts<Sort_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_decContext sort_dec(int i) {
			return GetRuleContext<Sort_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareFunContext cmd_declareFun() {
			return GetRuleContext<Cmd_declareFunContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareSortContext cmd_declareSort() {
			return GetRuleContext<Cmd_declareSortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunContext cmd_defineFun() {
			return GetRuleContext<Cmd_defineFunContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunRecContext cmd_defineFunRec() {
			return GetRuleContext<Cmd_defineFunRecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunsRecContext cmd_defineFunsRec() {
			return GetRuleContext<Cmd_defineFunsRecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext[] function_dec() {
			return GetRuleContexts<Function_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext function_dec(int i) {
			return GetRuleContext<Function_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineSortContext cmd_defineSort() {
			return GetRuleContext<Cmd_defineSortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_echoContext cmd_echo() {
			return GetRuleContext<Cmd_echoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_exitContext cmd_exit() {
			return GetRuleContext<Cmd_exitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getAssertionsContext cmd_getAssertions() {
			return GetRuleContext<Cmd_getAssertionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getAssignmentContext cmd_getAssignment() {
			return GetRuleContext<Cmd_getAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getInfoContext cmd_getInfo() {
			return GetRuleContext<Cmd_getInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Info_flagContext info_flag() {
			return GetRuleContext<Info_flagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getModelContext cmd_getModel() {
			return GetRuleContext<Cmd_getModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getOptionContext cmd_getOption() {
			return GetRuleContext<Cmd_getOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getProofContext cmd_getProof() {
			return GetRuleContext<Cmd_getProofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getUnsatAssumptionsContext cmd_getUnsatAssumptions() {
			return GetRuleContext<Cmd_getUnsatAssumptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getUnsatCoreContext cmd_getUnsatCore() {
			return GetRuleContext<Cmd_getUnsatCoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getValueContext cmd_getValue() {
			return GetRuleContext<Cmd_getValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_lemmaContext cmd_lemma() {
			return GetRuleContext<Cmd_lemmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_popContext cmd_pop() {
			return GetRuleContext<Cmd_popContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_pushContext cmd_push() {
			return GetRuleContext<Cmd_pushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_resetContext cmd_reset() {
			return GetRuleContext<Cmd_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_resetAssertionsContext cmd_resetAssertions() {
			return GetRuleContext<Cmd_resetAssertionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setInfoContext cmd_setInfo() {
			return GetRuleContext<Cmd_setInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setLogicContext cmd_setLogic() {
			return GetRuleContext<Cmd_setLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setOptionContext cmd_setOption() {
			return GetRuleContext<Cmd_setOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 164, RULE_command);
		int _la;
		try {
			State = 985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774;
				Match(ParOpen);
				State = 775;
				cmd_proof();
				State = 776;
				proof();
				State = 777;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				Match(ParOpen);
				State = 780;
				cmd_assert();
				State = 781;
				term();
				State = 782;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 784;
				Match(ParOpen);
				State = 785;
				cmd_checkSat();
				State = 786;
				Match(ParClose);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 788;
				Match(ParOpen);
				State = 789;
				cmd_checkSatAssuming();
				State = 790;
				Match(ParClose);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 792;
				Match(ParOpen);
				State = 793;
				cmd_declareConst();
				State = 794;
				symbol();
				State = 795;
				sort();
				State = 796;
				Match(ParClose);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 798;
				Match(ParOpen);
				State = 799;
				cmd_declareDatatype();
				State = 800;
				symbol();
				State = 801;
				datatype_dec();
				State = 802;
				Match(ParClose);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 804;
				Match(ParOpen);
				State = 805;
				cmd_declareDatatypes();
				State = 806;
				Match(ParOpen);
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 807;
					sort_dec();
					}
					}
					State = 810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 812;
				Match(ParClose);
				State = 813;
				Match(ParOpen);
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 814;
					datatype_dec();
					}
					}
					State = 817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 819;
				Match(ParClose);
				State = 820;
				Match(ParClose);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 822;
				Match(ParOpen);
				State = 823;
				cmd_declareFun();
				State = 824;
				symbol();
				State = 825;
				Match(ParOpen);
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
					{
					{
					State = 826;
					sort();
					}
					}
					State = 831;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 832;
				Match(ParClose);
				State = 833;
				sort();
				State = 834;
				Match(ParClose);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 836;
				Match(ParOpen);
				State = 837;
				cmd_declareSort();
				State = 838;
				symbol();
				State = 839;
				numeral();
				State = 840;
				Match(ParClose);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 842;
				Match(ParOpen);
				State = 843;
				cmd_defineFun();
				State = 844;
				function_def();
				State = 845;
				Match(ParClose);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 847;
				Match(ParOpen);
				State = 848;
				cmd_defineFunRec();
				State = 849;
				function_def();
				State = 850;
				Match(ParClose);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 852;
				Match(ParOpen);
				State = 853;
				cmd_defineFunsRec();
				State = 854;
				Match(ParOpen);
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 855;
					function_dec();
					}
					}
					State = 858;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 860;
				Match(ParClose);
				State = 861;
				Match(ParOpen);
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 862;
					term();
					}
					}
					State = 865;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0) );
				State = 867;
				Match(ParClose);
				State = 868;
				Match(ParClose);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 870;
				Match(ParOpen);
				State = 871;
				cmd_defineSort();
				State = 872;
				symbol();
				State = 873;
				Match(ParOpen);
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
					{
					{
					State = 874;
					symbol();
					}
					}
					State = 879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 880;
				Match(ParClose);
				State = 881;
				sort();
				State = 882;
				Match(ParClose);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 884;
				Match(ParOpen);
				State = 885;
				cmd_echo();
				State = 886;
				@string();
				State = 887;
				Match(ParClose);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 889;
				Match(ParOpen);
				State = 890;
				cmd_exit();
				State = 891;
				Match(ParClose);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 893;
				Match(ParOpen);
				State = 894;
				cmd_getAssertions();
				State = 895;
				Match(ParClose);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 897;
				Match(ParOpen);
				State = 898;
				cmd_getAssignment();
				State = 899;
				Match(ParClose);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 901;
				Match(ParOpen);
				State = 902;
				cmd_getInfo();
				State = 903;
				info_flag();
				State = 904;
				Match(ParClose);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 906;
				Match(ParOpen);
				State = 907;
				cmd_getModel();
				State = 908;
				Match(ParClose);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 910;
				Match(ParOpen);
				State = 911;
				cmd_getOption();
				State = 912;
				keyword();
				State = 913;
				Match(ParClose);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 915;
				Match(ParOpen);
				State = 916;
				cmd_getProof();
				State = 917;
				Match(ParClose);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 919;
				Match(ParOpen);
				State = 920;
				cmd_getUnsatAssumptions();
				State = 921;
				Match(ParClose);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 923;
				Match(ParOpen);
				State = 924;
				cmd_getUnsatCore();
				State = 925;
				Match(ParClose);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 927;
				Match(ParOpen);
				State = 928;
				cmd_getValue();
				State = 929;
				Match(ParOpen);
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 930;
					term();
					}
					}
					State = 933;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0) );
				State = 935;
				Match(ParClose);
				State = 936;
				Match(ParClose);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 938;
				Match(ParOpen);
				State = 939;
				cmd_lemma();
				State = 940;
				symbol();
				State = 941;
				Match(ParOpen);
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ParOpen) {
					{
					{
					State = 942;
					sorted_var();
					}
					}
					State = 947;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 948;
				Match(ParClose);
				State = 949;
				term();
				State = 950;
				Match(ParClose);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 952;
				Match(ParOpen);
				State = 953;
				cmd_pop();
				State = 954;
				numeral();
				State = 955;
				Match(ParClose);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 957;
				Match(ParOpen);
				State = 958;
				cmd_push();
				State = 959;
				numeral();
				State = 960;
				Match(ParClose);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 962;
				Match(ParOpen);
				State = 963;
				cmd_reset();
				State = 964;
				Match(ParClose);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 966;
				Match(ParOpen);
				State = 967;
				cmd_resetAssertions();
				State = 968;
				Match(ParClose);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 970;
				Match(ParOpen);
				State = 971;
				cmd_setInfo();
				State = 972;
				attribute();
				State = 973;
				Match(ParClose);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 975;
				Match(ParOpen);
				State = 976;
				cmd_setLogic();
				State = 977;
				symbol();
				State = 978;
				Match(ParClose);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 980;
				Match(ParOpen);
				State = 981;
				cmd_setOption();
				State = 982;
				option();
				State = 983;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_True() { return GetToken(SMTLIBv2Parser.PS_True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_False() { return GetToken(SMTLIBv2Parser.PS_False, 0); }
		public B_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterB_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitB_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_valueContext b_value() {
		B_valueContext _localctx = new B_valueContext(Context, State);
		EnterRule(_localctx, 166, RULE_b_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			_la = TokenStream.LA(1);
			if ( !(_la==PS_False || _la==PS_True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_DiagnosticOutputChannel() { return GetToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_GlobalDeclarations() { return GetToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_valueContext b_value() {
			return GetRuleContext<B_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_InteractiveMode() { return GetToken(SMTLIBv2Parser.PK_InteractiveMode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_PrintSuccess() { return GetToken(SMTLIBv2Parser.PK_PrintSuccess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssertions() { return GetToken(SMTLIBv2Parser.PK_ProduceAssertions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssignments() { return GetToken(SMTLIBv2Parser.PK_ProduceAssignments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceModels() { return GetToken(SMTLIBv2Parser.PK_ProduceModels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceProofs() { return GetToken(SMTLIBv2Parser.PK_ProduceProofs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatAssumptions() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatCores() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RandomSeed() { return GetToken(SMTLIBv2Parser.PK_RandomSeed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RegularOutputChannel() { return GetToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReproducibleResourceLimit() { return GetToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Verbosity() { return GetToken(SMTLIBv2Parser.PK_Verbosity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 168, RULE_option);
		try {
			State = 1018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 989;
				Match(PK_DiagnosticOutputChannel);
				State = 990;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 991;
				Match(PK_GlobalDeclarations);
				State = 992;
				b_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 993;
				Match(PK_InteractiveMode);
				State = 994;
				b_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 995;
				Match(PK_PrintSuccess);
				State = 996;
				b_value();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 997;
				Match(PK_ProduceAssertions);
				State = 998;
				b_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 999;
				Match(PK_ProduceAssignments);
				State = 1000;
				b_value();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1001;
				Match(PK_ProduceModels);
				State = 1002;
				b_value();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1003;
				Match(PK_ProduceProofs);
				State = 1004;
				b_value();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1005;
				Match(PK_ProduceUnsatAssumptions);
				State = 1006;
				b_value();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1007;
				Match(PK_ProduceUnsatCores);
				State = 1008;
				b_value();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1009;
				Match(PK_RandomSeed);
				State = 1010;
				numeral();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1011;
				Match(PK_RegularOutputChannel);
				State = 1012;
				@string();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1013;
				Match(PK_ReproducibleResourceLimit);
				State = 1014;
				numeral();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1015;
				Match(PK_Verbosity);
				State = 1016;
				numeral();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1017;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_flagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AllStatistics() { return GetToken(SMTLIBv2Parser.PK_AllStatistics, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Info_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterInfo_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitInfo_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_flag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_flagContext info_flag() {
		Info_flagContext _localctx = new Info_flagContext(Context, State);
		EnterRule(_localctx, 170, RULE_info_flag);
		try {
			State = 1028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020;
				Match(PK_AllStatistics);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				Match(PK_AssertionStackLevels);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1022;
				Match(PK_Authors);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1023;
				Match(PK_ErrorBehaviour);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1024;
				Match(PK_Name);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1025;
				Match(PK_ReasonUnknown);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1026;
				Match(PK_Version);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1027;
				keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_behaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ImmediateExit() { return GetToken(SMTLIBv2Parser.PS_ImmediateExit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ContinuedExecution() { return GetToken(SMTLIBv2Parser.PS_ContinuedExecution, 0); }
		public Error_behaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_behaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterError_behaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitError_behaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_behaviour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_behaviourContext error_behaviour() {
		Error_behaviourContext _localctx = new Error_behaviourContext(Context, State);
		EnterRule(_localctx, 172, RULE_error_behaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			_la = TokenStream.LA(1);
			if ( !(_la==PS_ContinuedExecution || _la==PS_ImmediateExit) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_unknownContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Memout() { return GetToken(SMTLIBv2Parser.PS_Memout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Incomplete() { return GetToken(SMTLIBv2Parser.PS_Incomplete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr() {
			return GetRuleContext<S_exprContext>(0);
		}
		public Reason_unknownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_unknown; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterReason_unknown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitReason_unknown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReason_unknown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reason_unknownContext reason_unknown() {
		Reason_unknownContext _localctx = new Reason_unknownContext(Context, State);
		EnterRule(_localctx, 174, RULE_reason_unknown);
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1032;
				Match(PS_Memout);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1033;
				Match(PS_Incomplete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1034;
				s_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFun() { return GetToken(SMTLIBv2Parser.CMD_DefineFun, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunRec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunsRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext[] function_dec() {
			return GetRuleContexts<Function_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext function_dec(int i) {
			return GetRuleContext<Function_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Model_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterModel_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitModel_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_responseContext model_response() {
		Model_responseContext _localctx = new Model_responseContext(Context, State);
		EnterRule(_localctx, 176, RULE_model_response);
		int _la;
		try {
			State = 1065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				Match(ParOpen);
				State = 1038;
				Match(CMD_DefineFun);
				State = 1039;
				function_def();
				State = 1040;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1042;
				Match(ParOpen);
				State = 1043;
				Match(CMD_DefineFunRec);
				State = 1044;
				function_def();
				State = 1045;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1047;
				Match(ParOpen);
				State = 1048;
				Match(CMD_DefineFunsRec);
				State = 1049;
				Match(ParOpen);
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1050;
					function_dec();
					}
					}
					State = 1053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 1055;
				Match(ParClose);
				State = 1056;
				Match(ParOpen);
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1057;
					term();
					}
					}
					State = 1060;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0) );
				State = 1062;
				Match(ParClose);
				State = 1063;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Error_behaviourContext error_behaviour() {
			return GetRuleContext<Error_behaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reason_unknownContext reason_unknown() {
			return GetRuleContext<Reason_unknownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Info_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterInfo_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitInfo_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_responseContext info_response() {
		Info_responseContext _localctx = new Info_responseContext(Context, State);
		EnterRule(_localctx, 178, RULE_info_response);
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1067;
				Match(PK_AssertionStackLevels);
				State = 1068;
				numeral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1069;
				Match(PK_Authors);
				State = 1070;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1071;
				Match(PK_ErrorBehaviour);
				State = 1072;
				error_behaviour();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1073;
				Match(PK_Name);
				State = 1074;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1075;
				Match(PK_ReasonUnknown);
				State = 1076;
				reason_unknown();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1077;
				Match(PK_Version);
				State = 1078;
				@string();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1079;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Valuation_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Valuation_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuation_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterValuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitValuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuation_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Valuation_pairContext valuation_pair() {
		Valuation_pairContext _localctx = new Valuation_pairContext(Context, State);
		EnterRule(_localctx, 180, RULE_valuation_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			Match(ParOpen);
			State = 1083;
			term();
			State = 1084;
			term();
			State = 1085;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_valuation_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_valueContext b_value() {
			return GetRuleContext<B_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public T_valuation_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_valuation_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterT_valuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitT_valuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_valuation_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_valuation_pairContext t_valuation_pair() {
		T_valuation_pairContext _localctx = new T_valuation_pairContext(Context, State);
		EnterRule(_localctx, 182, RULE_t_valuation_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			Match(ParOpen);
			State = 1088;
			symbol();
			State = 1089;
			b_value();
			State = 1090;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_sat_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Sat() { return GetToken(SMTLIBv2Parser.PS_Sat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsat() { return GetToken(SMTLIBv2Parser.PS_Unsat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unknown() { return GetToken(SMTLIBv2Parser.PS_Unknown, 0); }
		public Check_sat_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_sat_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCheck_sat_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCheck_sat_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_sat_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_sat_responseContext check_sat_response() {
		Check_sat_responseContext _localctx = new Check_sat_responseContext(Context, State);
		EnterRule(_localctx, 184, RULE_check_sat_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PS_Sat) | (1L << PS_Unknown) | (1L << PS_Unsat))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Echo_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Echo_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echo_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterEcho_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitEcho_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEcho_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Echo_responseContext echo_response() {
		Echo_responseContext _localctx = new Echo_responseContext(Context, State);
		EnterRule(_localctx, 186, RULE_echo_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_assertions_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Get_assertions_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_assertions_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_assertions_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_assertions_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_assertions_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_assertions_responseContext get_assertions_response() {
		Get_assertions_responseContext _localctx = new Get_assertions_responseContext(Context, State);
		EnterRule(_localctx, 188, RULE_get_assertions_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1096;
			Match(ParOpen);
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Numeral - 71)) | (1L << (Binary - 71)) | (1L << (HexDecimal - 71)) | (1L << (Decimal - 71)) | (1L << (UndefinedSymbol - 71)))) != 0)) {
				{
				{
				State = 1097;
				term();
				}
				}
				State = 1102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1103;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_assignment_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_valuation_pairContext[] t_valuation_pair() {
			return GetRuleContexts<T_valuation_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_valuation_pairContext t_valuation_pair(int i) {
			return GetRuleContext<T_valuation_pairContext>(i);
		}
		public Get_assignment_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_assignment_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_assignment_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_assignment_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_assignment_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_assignment_responseContext get_assignment_response() {
		Get_assignment_responseContext _localctx = new Get_assignment_responseContext(Context, State);
		EnterRule(_localctx, 190, RULE_get_assignment_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(ParOpen);
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 1106;
				t_valuation_pair();
				}
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1112;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_info_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Info_responseContext[] info_response() {
			return GetRuleContexts<Info_responseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Info_responseContext info_response(int i) {
			return GetRuleContext<Info_responseContext>(i);
		}
		public Get_info_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_info_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_info_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_info_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_info_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_info_responseContext get_info_response() {
		Get_info_responseContext _localctx = new Get_info_responseContext(Context, State);
		EnterRule(_localctx, 192, RULE_get_info_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			Match(ParOpen);
			State = 1116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1115;
				info_response();
				}
				}
				State = 1118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Colon - 75)) | (1L << (PK_AllStatistics - 75)) | (1L << (PK_AssertionStackLevels - 75)) | (1L << (PK_Authors - 75)) | (1L << (PK_Category - 75)) | (1L << (PK_Chainable - 75)) | (1L << (PK_Definition - 75)) | (1L << (PK_DiagnosticOutputChannel - 75)) | (1L << (PK_ErrorBehaviour - 75)) | (1L << (PK_Extension - 75)) | (1L << (PK_Funs - 75)) | (1L << (PK_FunsDescription - 75)) | (1L << (PK_GlobalDeclarations - 75)) | (1L << (PK_InteractiveMode - 75)) | (1L << (PK_Language - 75)) | (1L << (PK_LeftAssoc - 75)) | (1L << (PK_License - 75)) | (1L << (PK_Named - 75)) | (1L << (PK_Name - 75)) | (1L << (PK_Notes - 75)) | (1L << (PK_Pattern - 75)) | (1L << (PK_PrintSuccess - 75)) | (1L << (PK_ProduceAssertions - 75)) | (1L << (PK_ProduceAssignments - 75)) | (1L << (PK_ProduceModels - 75)) | (1L << (PK_ProduceProofs - 75)) | (1L << (PK_ProduceUnsatAssumptions - 75)) | (1L << (PK_ProduceUnsatCores - 75)) | (1L << (PK_RandomSeed - 75)) | (1L << (PK_ReasonUnknown - 75)) | (1L << (PK_RegularOutputChannel - 75)) | (1L << (PK_ReproducibleResourceLimit - 75)) | (1L << (PK_RightAssoc - 75)) | (1L << (PK_SmtLibVersion - 75)) | (1L << (PK_Sorts - 75)) | (1L << (PK_SortsDescription - 75)) | (1L << (PK_Source - 75)) | (1L << (PK_Status - 75)) | (1L << (PK_Theories - 75)) | (1L << (PK_Values - 75)) | (1L << (PK_Verbosity - 75)) | (1L << (PK_Version - 75)))) != 0) );
			State = 1120;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_model_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Model_responseContext[] model_response() {
			return GetRuleContexts<Model_responseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_responseContext model_response(int i) {
			return GetRuleContext<Model_responseContext>(i);
		}
		public Get_model_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_model_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_model_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_model_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_model_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_model_responseContext get_model_response() {
		Get_model_responseContext _localctx = new Get_model_responseContext(Context, State);
		EnterRule(_localctx, 194, RULE_get_model_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122;
			Match(ParOpen);
			State = 1126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 1123;
				model_response();
				}
				}
				State = 1128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1129;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_option_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext attribute_value() {
			return GetRuleContext<Attribute_valueContext>(0);
		}
		public Get_option_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_option_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_option_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_option_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_option_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_option_responseContext get_option_response() {
		Get_option_responseContext _localctx = new Get_option_responseContext(Context, State);
		EnterRule(_localctx, 196, RULE_get_option_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			attribute_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_proof_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr() {
			return GetRuleContext<S_exprContext>(0);
		}
		public Get_proof_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_proof_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_proof_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_proof_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_proof_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_proof_responseContext get_proof_response() {
		Get_proof_responseContext _localctx = new Get_proof_responseContext(Context, State);
		EnterRule(_localctx, 198, RULE_get_proof_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			s_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_unsat_assump_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Get_unsat_assump_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_unsat_assump_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_unsat_assump_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_unsat_assump_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_unsat_assump_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_unsat_assump_responseContext get_unsat_assump_response() {
		Get_unsat_assump_responseContext _localctx = new Get_unsat_assump_responseContext(Context, State);
		EnterRule(_localctx, 200, RULE_get_unsat_assump_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			Match(ParOpen);
			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
				{
				{
				State = 1136;
				symbol();
				}
				}
				State = 1141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1142;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_unsat_core_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Get_unsat_core_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_unsat_core_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_unsat_core_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_unsat_core_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_unsat_core_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_unsat_core_responseContext get_unsat_core_response() {
		Get_unsat_core_responseContext _localctx = new Get_unsat_core_responseContext(Context, State);
		EnterRule(_localctx, 202, RULE_get_unsat_core_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			Match(ParOpen);
			State = 1148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
				{
				{
				State = 1145;
				symbol();
				}
				}
				State = 1150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1151;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_value_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Valuation_pairContext[] valuation_pair() {
			return GetRuleContexts<Valuation_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Valuation_pairContext valuation_pair(int i) {
			return GetRuleContext<Valuation_pairContext>(i);
		}
		public Get_value_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_value_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_value_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_value_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_value_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_value_responseContext get_value_response() {
		Get_value_responseContext _localctx = new Get_value_responseContext(Context, State);
		EnterRule(_localctx, 204, RULE_get_value_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			Match(ParOpen);
			State = 1155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1154;
				valuation_pair();
				}
				}
				State = 1157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ParOpen );
			State = 1159;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_success_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Check_sat_responseContext check_sat_response() {
			return GetRuleContext<Check_sat_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Echo_responseContext echo_response() {
			return GetRuleContext<Echo_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_assertions_responseContext get_assertions_response() {
			return GetRuleContext<Get_assertions_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_assignment_responseContext get_assignment_response() {
			return GetRuleContext<Get_assignment_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_info_responseContext get_info_response() {
			return GetRuleContext<Get_info_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_model_responseContext get_model_response() {
			return GetRuleContext<Get_model_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_option_responseContext get_option_response() {
			return GetRuleContext<Get_option_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_proof_responseContext get_proof_response() {
			return GetRuleContext<Get_proof_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_unsat_assump_responseContext get_unsat_assump_response() {
			return GetRuleContext<Get_unsat_assump_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_unsat_core_responseContext get_unsat_core_response() {
			return GetRuleContext<Get_unsat_core_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_value_responseContext get_value_response() {
			return GetRuleContext<Get_value_responseContext>(0);
		}
		public Specific_success_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_success_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSpecific_success_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSpecific_success_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_success_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_success_responseContext specific_success_response() {
		Specific_success_responseContext _localctx = new Specific_success_responseContext(Context, State);
		EnterRule(_localctx, 206, RULE_specific_success_response);
		try {
			State = 1172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1161;
				check_sat_response();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1162;
				echo_response();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1163;
				get_assertions_response();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1164;
				get_assignment_response();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1165;
				get_info_response();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1166;
				get_model_response();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1167;
				get_option_response();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1168;
				get_proof_response();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1169;
				get_unsat_assump_response();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1170;
				get_unsat_core_response();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1171;
				get_value_response();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Success() { return GetToken(SMTLIBv2Parser.PS_Success, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Specific_success_responseContext specific_success_response() {
			return GetRuleContext<Specific_success_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsupported() { return GetToken(SMTLIBv2Parser.PS_Unsupported, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Error() { return GetToken(SMTLIBv2Parser.PS_Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public General_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGeneral_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGeneral_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_responseContext general_response() {
		General_responseContext _localctx = new General_responseContext(Context, State);
		EnterRule(_localctx, 208, RULE_general_response);
		try {
			State = 1182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1174;
				Match(PS_Success);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1175;
				specific_success_response();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1176;
				Match(PS_Unsupported);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1177;
				Match(ParOpen);
				State = 1178;
				Match(PS_Error);
				State = 1179;
				@string();
				State = 1180;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,118,1185,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,221,8,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,3,7,231,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,13,3,13,246,8,13,1,14,1,14,1,14,1,14,1,14,3,14,253,8,14,1,
		15,1,15,1,15,1,15,1,15,5,15,260,8,15,10,15,12,15,263,9,15,1,15,3,15,266,
		8,15,1,16,1,16,3,16,270,8,16,1,17,1,17,1,17,1,17,1,17,4,17,277,8,17,11,
		17,12,17,278,1,17,1,17,3,17,283,8,17,1,18,1,18,1,18,1,18,5,18,289,8,18,
		10,18,12,18,292,9,18,1,18,3,18,295,8,18,1,19,1,19,1,19,1,19,3,19,301,8,
		19,1,20,1,20,1,20,1,20,4,20,307,8,20,11,20,12,20,308,1,20,1,20,3,20,313,
		8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,322,8,21,1,22,1,22,1,22,1,
		22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,4,24,338,8,24,11,
		24,12,24,339,1,24,1,24,3,24,344,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
		1,26,1,26,1,26,4,26,356,8,26,11,26,12,26,357,1,26,1,26,1,26,1,26,1,26,
		1,26,4,26,366,8,26,11,26,12,26,367,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,4,26,378,8,26,11,26,12,26,379,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,4,26,390,8,26,11,26,12,26,391,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,4,26,403,8,26,11,26,12,26,404,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,4,26,414,8,26,11,26,12,26,415,1,26,1,26,3,26,420,8,26,1,27,1,27,1,
		27,1,27,5,27,426,8,27,10,27,12,27,429,9,27,1,27,1,27,1,28,1,28,1,29,1,
		29,1,29,1,29,5,29,439,8,29,10,29,12,29,442,9,29,1,29,1,29,1,29,1,29,1,
		29,1,29,5,29,450,8,29,10,29,12,29,453,9,29,1,29,1,29,1,29,1,29,1,29,4,
		29,460,8,29,11,29,12,29,461,1,29,5,29,465,8,29,10,29,12,29,468,9,29,1,
		29,1,29,3,29,472,8,29,1,30,1,30,1,30,1,30,1,30,4,30,479,8,30,11,30,12,
		30,480,1,30,1,30,1,30,1,30,4,30,487,8,30,11,30,12,30,488,1,30,5,30,492,
		8,30,10,30,12,30,495,9,30,1,30,1,30,1,30,3,30,500,8,30,1,31,1,31,1,31,
		4,31,505,8,31,11,31,12,31,506,1,31,1,31,1,31,1,31,1,31,4,31,514,8,31,11,
		31,12,31,515,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,3,31,531,8,31,1,32,1,32,1,32,1,32,4,32,537,8,32,11,32,12,32,538,
		1,32,1,32,1,33,1,33,1,33,4,33,546,8,33,11,33,12,33,547,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,561,8,33,1,34,1,34,1,34,1,
		34,4,34,567,8,34,11,34,12,34,568,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
		36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,5,37,586,8,37,10,37,12,37,589,9,
		37,1,37,1,37,1,38,1,38,4,38,595,8,38,11,38,12,38,596,1,38,1,38,1,38,1,
		38,1,38,1,38,4,38,605,8,38,11,38,12,38,606,1,38,1,38,1,38,4,38,612,8,38,
		11,38,12,38,613,1,38,1,38,1,38,3,38,619,8,38,1,39,1,39,1,39,1,39,5,39,
		625,8,39,10,39,12,39,628,9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,5,40,
		637,8,40,10,40,12,40,640,9,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
		1,41,1,41,3,41,652,8,41,1,42,5,42,655,8,42,10,42,12,42,658,9,42,1,42,1,
		42,5,42,662,8,42,10,42,12,42,665,9,42,1,42,3,42,668,8,42,1,43,1,43,1,43,
		1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
		1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
		1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,
		1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,
		1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,
		1,78,1,78,1,79,4,79,746,8,79,11,79,12,79,747,1,79,1,79,1,79,1,79,3,79,
		754,8,79,1,80,1,80,1,80,1,80,1,80,1,80,5,80,762,8,80,10,80,12,80,765,9,
		80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,4,82,809,8,82,11,82,12,82,810,1,82,1,82,1,82,4,82,816,8,82,11,82,12,
		82,817,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,828,8,82,10,82,12,
		82,831,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,4,82,857,8,
		82,11,82,12,82,858,1,82,1,82,1,82,4,82,864,8,82,11,82,12,82,865,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,876,8,82,10,82,12,82,879,9,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,4,82,932,8,82,11,82,12,82,933,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,944,8,82,10,82,12,82,947,
		9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,986,8,82,1,83,1,
		83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
		84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
		84,1,84,3,84,1019,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1029,
		8,85,1,86,1,86,1,87,1,87,1,87,3,87,1036,8,87,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,4,88,1052,8,88,11,88,12,88,
		1053,1,88,1,88,1,88,4,88,1059,8,88,11,88,12,88,1060,1,88,1,88,1,88,3,88,
		1066,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		1,89,3,89,1081,8,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,
		1,92,1,92,1,93,1,93,1,94,1,94,5,94,1099,8,94,10,94,12,94,1102,9,94,1,94,
		1,94,1,95,1,95,5,95,1108,8,95,10,95,12,95,1111,9,95,1,95,1,95,1,96,1,96,
		4,96,1117,8,96,11,96,12,96,1118,1,96,1,96,1,97,1,97,5,97,1125,8,97,10,
		97,12,97,1128,9,97,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,5,100,1138,
		8,100,10,100,12,100,1141,9,100,1,100,1,100,1,101,1,101,5,101,1147,8,101,
		10,101,12,101,1150,9,101,1,101,1,101,1,102,1,102,4,102,1156,8,102,11,102,
		12,102,1157,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
		1,103,1,103,1,103,3,103,1173,8,103,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,3,104,1183,8,104,1,104,0,0,105,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,202,204,206,208,0,7,1,0,58,70,1,0,7,22,
		1,0,76,116,3,0,62,62,68,68,70,70,2,0,11,11,19,19,2,0,9,9,12,12,3,0,16,
		16,20,20,22,22,1249,0,210,1,0,0,0,2,213,1,0,0,0,4,216,1,0,0,0,6,220,1,
		0,0,0,8,222,1,0,0,0,10,224,1,0,0,0,12,226,1,0,0,0,14,230,1,0,0,0,16,232,
		1,0,0,0,18,234,1,0,0,0,20,236,1,0,0,0,22,238,1,0,0,0,24,240,1,0,0,0,26,
		245,1,0,0,0,28,252,1,0,0,0,30,265,1,0,0,0,32,269,1,0,0,0,34,282,1,0,0,
		0,36,294,1,0,0,0,38,300,1,0,0,0,40,312,1,0,0,0,42,321,1,0,0,0,44,323,1,
		0,0,0,46,328,1,0,0,0,48,343,1,0,0,0,50,345,1,0,0,0,52,419,1,0,0,0,54,421,
		1,0,0,0,56,432,1,0,0,0,58,471,1,0,0,0,60,499,1,0,0,0,62,530,1,0,0,0,64,
		532,1,0,0,0,66,560,1,0,0,0,68,562,1,0,0,0,70,572,1,0,0,0,72,577,1,0,0,
		0,74,582,1,0,0,0,76,618,1,0,0,0,78,620,1,0,0,0,80,633,1,0,0,0,82,651,1,
		0,0,0,84,667,1,0,0,0,86,669,1,0,0,0,88,674,1,0,0,0,90,676,1,0,0,0,92,678,
		1,0,0,0,94,680,1,0,0,0,96,682,1,0,0,0,98,684,1,0,0,0,100,686,1,0,0,0,102,
		688,1,0,0,0,104,690,1,0,0,0,106,692,1,0,0,0,108,694,1,0,0,0,110,696,1,
		0,0,0,112,698,1,0,0,0,114,700,1,0,0,0,116,702,1,0,0,0,118,704,1,0,0,0,
		120,706,1,0,0,0,122,708,1,0,0,0,124,710,1,0,0,0,126,712,1,0,0,0,128,714,
		1,0,0,0,130,716,1,0,0,0,132,718,1,0,0,0,134,720,1,0,0,0,136,722,1,0,0,
		0,138,724,1,0,0,0,140,726,1,0,0,0,142,728,1,0,0,0,144,730,1,0,0,0,146,
		732,1,0,0,0,148,734,1,0,0,0,150,736,1,0,0,0,152,738,1,0,0,0,154,740,1,
		0,0,0,156,742,1,0,0,0,158,753,1,0,0,0,160,755,1,0,0,0,162,769,1,0,0,0,
		164,985,1,0,0,0,166,987,1,0,0,0,168,1018,1,0,0,0,170,1028,1,0,0,0,172,
		1030,1,0,0,0,174,1035,1,0,0,0,176,1065,1,0,0,0,178,1080,1,0,0,0,180,1082,
		1,0,0,0,182,1087,1,0,0,0,184,1092,1,0,0,0,186,1094,1,0,0,0,188,1096,1,
		0,0,0,190,1105,1,0,0,0,192,1114,1,0,0,0,194,1122,1,0,0,0,196,1131,1,0,
		0,0,198,1133,1,0,0,0,200,1135,1,0,0,0,202,1144,1,0,0,0,204,1153,1,0,0,
		0,206,1172,1,0,0,0,208,1182,1,0,0,0,210,211,3,84,42,0,211,212,5,0,0,1,
		212,1,1,0,0,0,213,214,3,208,104,0,214,215,5,0,0,1,215,3,1,0,0,0,216,217,
		7,0,0,0,217,5,1,0,0,0,218,221,3,10,5,0,219,221,5,117,0,0,220,218,1,0,0,
		0,220,219,1,0,0,0,221,7,1,0,0,0,222,223,5,6,0,0,223,9,1,0,0,0,224,225,
		7,1,0,0,225,11,1,0,0,0,226,227,7,2,0,0,227,13,1,0,0,0,228,231,3,6,3,0,
		229,231,3,8,4,0,230,228,1,0,0,0,230,229,1,0,0,0,231,15,1,0,0,0,232,233,
		5,71,0,0,233,17,1,0,0,0,234,235,5,74,0,0,235,19,1,0,0,0,236,237,5,73,0,
		0,237,21,1,0,0,0,238,239,5,72,0,0,239,23,1,0,0,0,240,241,5,5,0,0,241,25,
		1,0,0,0,242,246,3,12,6,0,243,244,5,75,0,0,244,246,3,6,3,0,245,242,1,0,
		0,0,245,243,1,0,0,0,246,27,1,0,0,0,247,253,3,16,8,0,248,253,3,18,9,0,249,
		253,3,20,10,0,250,253,3,22,11,0,251,253,3,24,12,0,252,247,1,0,0,0,252,
		248,1,0,0,0,252,249,1,0,0,0,252,250,1,0,0,0,252,251,1,0,0,0,253,29,1,0,
		0,0,254,266,3,28,14,0,255,266,3,14,7,0,256,266,3,26,13,0,257,261,5,2,0,
		0,258,260,3,30,15,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,
		262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,266,5,3,0,0,265,254,1,
		0,0,0,265,255,1,0,0,0,265,256,1,0,0,0,265,257,1,0,0,0,266,31,1,0,0,0,267,
		270,3,16,8,0,268,270,3,14,7,0,269,267,1,0,0,0,269,268,1,0,0,0,270,33,1,
		0,0,0,271,283,3,14,7,0,272,273,5,2,0,0,273,274,5,59,0,0,274,276,3,14,7,
		0,275,277,3,32,16,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,
		279,1,0,0,0,279,280,1,0,0,0,280,281,5,3,0,0,281,283,1,0,0,0,282,271,1,
		0,0,0,282,272,1,0,0,0,283,35,1,0,0,0,284,295,3,28,14,0,285,295,3,14,7,
		0,286,290,5,2,0,0,287,289,3,30,15,0,288,287,1,0,0,0,289,292,1,0,0,0,290,
		288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,295,5,
		3,0,0,294,284,1,0,0,0,294,285,1,0,0,0,294,286,1,0,0,0,295,37,1,0,0,0,296,
		301,3,26,13,0,297,298,3,26,13,0,298,299,3,36,18,0,299,301,1,0,0,0,300,
		296,1,0,0,0,300,297,1,0,0,0,301,39,1,0,0,0,302,313,3,34,17,0,303,304,5,
		2,0,0,304,306,3,34,17,0,305,307,3,40,20,0,306,305,1,0,0,0,307,308,1,0,
		0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,5,3,0,0,311,
		313,1,0,0,0,312,302,1,0,0,0,312,303,1,0,0,0,313,41,1,0,0,0,314,322,3,34,
		17,0,315,316,5,2,0,0,316,317,5,60,0,0,317,318,3,34,17,0,318,319,3,40,20,
		0,319,320,5,3,0,0,320,322,1,0,0,0,321,314,1,0,0,0,321,315,1,0,0,0,322,
		43,1,0,0,0,323,324,5,2,0,0,324,325,3,14,7,0,325,326,3,52,26,0,326,327,
		5,3,0,0,327,45,1,0,0,0,328,329,5,2,0,0,329,330,3,14,7,0,330,331,3,40,20,
		0,331,332,5,3,0,0,332,47,1,0,0,0,333,344,3,14,7,0,334,335,5,2,0,0,335,
		337,3,14,7,0,336,338,3,14,7,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,
		1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,3,0,0,342,344,1,0,0,
		0,343,333,1,0,0,0,343,334,1,0,0,0,344,49,1,0,0,0,345,346,5,2,0,0,346,347,
		3,48,24,0,347,348,3,52,26,0,348,349,5,3,0,0,349,51,1,0,0,0,350,420,3,28,
		14,0,351,420,3,42,21,0,352,353,5,2,0,0,353,355,3,42,21,0,354,356,3,52,
		26,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,
		359,1,0,0,0,359,360,5,3,0,0,360,420,1,0,0,0,361,362,5,2,0,0,362,363,5,
		66,0,0,363,365,5,2,0,0,364,366,3,44,22,0,365,364,1,0,0,0,366,367,1,0,0,
		0,367,365,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,3,0,0,370,
		371,3,52,26,0,371,372,5,3,0,0,372,420,1,0,0,0,373,374,5,2,0,0,374,375,
		5,65,0,0,375,377,5,2,0,0,376,378,3,46,23,0,377,376,1,0,0,0,378,379,1,0,
		0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,3,0,0,382,
		383,3,52,26,0,383,384,5,3,0,0,384,420,1,0,0,0,385,386,5,2,0,0,386,387,
		5,63,0,0,387,389,5,2,0,0,388,390,3,46,23,0,389,388,1,0,0,0,390,391,1,0,
		0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,3,0,0,394,
		395,3,52,26,0,395,396,5,3,0,0,396,420,1,0,0,0,397,398,5,2,0,0,398,399,
		5,67,0,0,399,400,3,52,26,0,400,402,5,2,0,0,401,403,3,50,25,0,402,401,1,
		0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,
		406,407,5,3,0,0,407,408,5,3,0,0,408,420,1,0,0,0,409,410,5,2,0,0,410,411,
		5,58,0,0,411,413,3,52,26,0,412,414,3,38,19,0,413,412,1,0,0,0,414,415,1,
		0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,3,0,0,
		418,420,1,0,0,0,419,350,1,0,0,0,419,351,1,0,0,0,419,352,1,0,0,0,419,361,
		1,0,0,0,419,373,1,0,0,0,419,385,1,0,0,0,419,397,1,0,0,0,419,409,1,0,0,
		0,420,53,1,0,0,0,421,422,5,2,0,0,422,423,3,34,17,0,423,427,3,16,8,0,424,
		426,3,38,19,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
		1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,5,3,0,0,431,55,1,0,0,0,
		432,433,7,3,0,0,433,57,1,0,0,0,434,435,5,2,0,0,435,436,3,28,14,0,436,440,
		3,40,20,0,437,439,3,38,19,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,
		0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,3,0,0,
		444,472,1,0,0,0,445,446,5,2,0,0,446,447,3,56,28,0,447,451,3,40,20,0,448,
		450,3,38,19,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,
		1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,455,5,3,0,0,455,472,1,0,0,
		0,456,457,5,2,0,0,457,459,3,34,17,0,458,460,3,40,20,0,459,458,1,0,0,0,
		460,461,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,466,1,0,0,0,463,465,
		3,38,19,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,
		0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,3,0,0,470,472,1,0,0,0,471,
		434,1,0,0,0,471,445,1,0,0,0,471,456,1,0,0,0,472,59,1,0,0,0,473,500,3,58,
		29,0,474,475,5,2,0,0,475,476,5,69,0,0,476,478,5,2,0,0,477,479,3,14,7,0,
		478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,482,
		1,0,0,0,482,483,5,3,0,0,483,484,5,2,0,0,484,486,3,34,17,0,485,487,3,40,
		20,0,486,485,1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,
		493,1,0,0,0,490,492,3,38,19,0,491,490,1,0,0,0,492,495,1,0,0,0,493,491,
		1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,496,497,5,3,0,
		0,497,498,5,3,0,0,498,500,1,0,0,0,499,473,1,0,0,0,499,474,1,0,0,0,500,
		61,1,0,0,0,501,502,5,109,0,0,502,504,5,2,0,0,503,505,3,54,27,0,504,503,
		1,0,0,0,505,506,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,
		0,508,509,5,3,0,0,509,531,1,0,0,0,510,511,5,85,0,0,511,513,5,2,0,0,512,
		514,3,60,30,0,513,512,1,0,0,0,514,515,1,0,0,0,515,513,1,0,0,0,515,516,
		1,0,0,0,516,517,1,0,0,0,517,518,5,3,0,0,518,531,1,0,0,0,519,520,5,110,
		0,0,520,531,3,24,12,0,521,522,5,86,0,0,522,531,3,24,12,0,523,524,5,81,
		0,0,524,531,3,24,12,0,525,526,5,114,0,0,526,531,3,24,12,0,527,528,5,94,
		0,0,528,531,3,24,12,0,529,531,3,38,19,0,530,501,1,0,0,0,530,510,1,0,0,
		0,530,519,1,0,0,0,530,521,1,0,0,0,530,523,1,0,0,0,530,525,1,0,0,0,530,
		527,1,0,0,0,530,529,1,0,0,0,531,63,1,0,0,0,532,533,5,2,0,0,533,534,5,18,
		0,0,534,536,3,14,7,0,535,537,3,62,31,0,536,535,1,0,0,0,537,538,1,0,0,0,
		538,536,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,541,5,3,0,0,541,65,
		1,0,0,0,542,543,5,113,0,0,543,545,5,2,0,0,544,546,3,14,7,0,545,544,1,0,
		0,0,546,547,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,
		550,5,3,0,0,550,561,1,0,0,0,551,552,5,89,0,0,552,561,3,24,12,0,553,554,
		5,84,0,0,554,561,3,24,12,0,555,556,5,114,0,0,556,561,3,24,12,0,557,558,
		5,94,0,0,558,561,3,24,12,0,559,561,3,38,19,0,560,542,1,0,0,0,560,551,1,
		0,0,0,560,553,1,0,0,0,560,555,1,0,0,0,560,557,1,0,0,0,560,559,1,0,0,0,
		561,67,1,0,0,0,562,563,5,2,0,0,563,564,5,14,0,0,564,566,3,14,7,0,565,567,
		3,66,33,0,566,565,1,0,0,0,567,568,1,0,0,0,568,566,1,0,0,0,568,569,1,0,
		0,0,569,570,1,0,0,0,570,571,5,3,0,0,571,69,1,0,0,0,572,573,5,2,0,0,573,
		574,3,14,7,0,574,575,3,16,8,0,575,576,5,3,0,0,576,71,1,0,0,0,577,578,5,
		2,0,0,578,579,3,14,7,0,579,580,3,40,20,0,580,581,5,3,0,0,581,73,1,0,0,
		0,582,583,5,2,0,0,583,587,3,14,7,0,584,586,3,72,36,0,585,584,1,0,0,0,586,
		589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,
		0,0,0,590,591,5,3,0,0,591,75,1,0,0,0,592,594,5,2,0,0,593,595,3,74,37,0,
		594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,598,
		1,0,0,0,598,599,5,3,0,0,599,619,1,0,0,0,600,601,5,2,0,0,601,602,5,69,0,
		0,602,604,5,2,0,0,603,605,3,14,7,0,604,603,1,0,0,0,605,606,1,0,0,0,606,
		604,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,3,0,0,609,611,5,
		2,0,0,610,612,3,74,37,0,611,610,1,0,0,0,612,613,1,0,0,0,613,611,1,0,0,
		0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,3,0,0,616,617,5,3,0,0,617,
		619,1,0,0,0,618,592,1,0,0,0,618,600,1,0,0,0,619,77,1,0,0,0,620,621,5,2,
		0,0,621,622,3,14,7,0,622,626,5,2,0,0,623,625,3,46,23,0,624,623,1,0,0,0,
		625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,
		1,0,0,0,629,630,5,3,0,0,630,631,3,40,20,0,631,632,5,3,0,0,632,79,1,0,0,
		0,633,634,3,14,7,0,634,638,5,2,0,0,635,637,3,46,23,0,636,635,1,0,0,0,637,
		640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,638,1,
		0,0,0,641,642,5,3,0,0,642,643,3,40,20,0,643,644,3,52,26,0,644,81,1,0,0,
		0,645,652,3,14,7,0,646,647,5,2,0,0,647,648,5,7,0,0,648,649,3,14,7,0,649,
		650,5,3,0,0,650,652,1,0,0,0,651,645,1,0,0,0,651,646,1,0,0,0,652,83,1,0,
		0,0,653,655,3,164,82,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,
		656,657,1,0,0,0,657,668,1,0,0,0,658,656,1,0,0,0,659,663,5,2,0,0,660,662,
		3,164,82,0,661,660,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,
		0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,668,5,3,0,0,667,656,1,0,0,0,667,
		659,1,0,0,0,668,85,1,0,0,0,669,670,5,2,0,0,670,671,5,24,0,0,671,672,3,
		52,26,0,672,673,5,3,0,0,673,87,1,0,0,0,674,675,5,23,0,0,675,89,1,0,0,0,
		676,677,5,25,0,0,677,91,1,0,0,0,678,679,5,26,0,0,679,93,1,0,0,0,680,681,
		5,27,0,0,681,95,1,0,0,0,682,683,5,28,0,0,683,97,1,0,0,0,684,685,5,29,0,
		0,685,99,1,0,0,0,686,687,5,30,0,0,687,101,1,0,0,0,688,689,5,31,0,0,689,
		103,1,0,0,0,690,691,5,32,0,0,691,105,1,0,0,0,692,693,5,33,0,0,693,107,
		1,0,0,0,694,695,5,34,0,0,695,109,1,0,0,0,696,697,5,35,0,0,697,111,1,0,
		0,0,698,699,5,36,0,0,699,113,1,0,0,0,700,701,5,37,0,0,701,115,1,0,0,0,
		702,703,5,38,0,0,703,117,1,0,0,0,704,705,5,39,0,0,705,119,1,0,0,0,706,
		707,5,40,0,0,707,121,1,0,0,0,708,709,5,41,0,0,709,123,1,0,0,0,710,711,
		5,42,0,0,711,125,1,0,0,0,712,713,5,43,0,0,713,127,1,0,0,0,714,715,5,44,
		0,0,715,129,1,0,0,0,716,717,5,45,0,0,717,131,1,0,0,0,718,719,5,46,0,0,
		719,133,1,0,0,0,720,721,5,47,0,0,721,135,1,0,0,0,722,723,5,48,0,0,723,
		137,1,0,0,0,724,725,5,49,0,0,725,139,1,0,0,0,726,727,5,50,0,0,727,141,
		1,0,0,0,728,729,5,51,0,0,729,143,1,0,0,0,730,731,5,52,0,0,731,145,1,0,
		0,0,732,733,5,53,0,0,733,147,1,0,0,0,734,735,5,54,0,0,735,149,1,0,0,0,
		736,737,5,55,0,0,737,151,1,0,0,0,738,739,5,56,0,0,739,153,1,0,0,0,740,
		741,5,57,0,0,741,155,1,0,0,0,742,743,3,34,17,0,743,157,1,0,0,0,744,746,
		3,52,26,0,745,744,1,0,0,0,746,747,1,0,0,0,747,745,1,0,0,0,747,748,1,0,
		0,0,748,754,1,0,0,0,749,750,5,2,0,0,750,751,3,158,79,0,751,752,5,3,0,0,
		752,754,1,0,0,0,753,745,1,0,0,0,753,749,1,0,0,0,754,159,1,0,0,0,755,756,
		5,2,0,0,756,757,5,2,0,0,757,758,3,150,75,0,758,759,5,3,0,0,759,763,3,86,
		43,0,760,762,3,160,80,0,761,760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,
		0,763,764,1,0,0,0,764,766,1,0,0,0,765,763,1,0,0,0,766,767,3,52,26,0,767,
		768,5,3,0,0,768,161,1,0,0,0,769,770,3,152,76,0,770,771,3,160,80,0,771,
		772,3,86,43,0,772,773,3,52,26,0,773,163,1,0,0,0,774,775,5,2,0,0,775,776,
		3,154,77,0,776,777,3,162,81,0,777,778,5,3,0,0,778,986,1,0,0,0,779,780,
		5,2,0,0,780,781,3,88,44,0,781,782,3,52,26,0,782,783,5,3,0,0,783,986,1,
		0,0,0,784,785,5,2,0,0,785,786,3,90,45,0,786,787,5,3,0,0,787,986,1,0,0,
		0,788,789,5,2,0,0,789,790,3,92,46,0,790,791,5,3,0,0,791,986,1,0,0,0,792,
		793,5,2,0,0,793,794,3,94,47,0,794,795,3,14,7,0,795,796,3,40,20,0,796,797,
		5,3,0,0,797,986,1,0,0,0,798,799,5,2,0,0,799,800,3,96,48,0,800,801,3,14,
		7,0,801,802,3,76,38,0,802,803,5,3,0,0,803,986,1,0,0,0,804,805,5,2,0,0,
		805,806,3,98,49,0,806,808,5,2,0,0,807,809,3,70,35,0,808,807,1,0,0,0,809,
		810,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,813,5,
		3,0,0,813,815,5,2,0,0,814,816,3,76,38,0,815,814,1,0,0,0,816,817,1,0,0,
		0,817,815,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,820,5,3,0,0,820,
		821,5,3,0,0,821,986,1,0,0,0,822,823,5,2,0,0,823,824,3,100,50,0,824,825,
		3,14,7,0,825,829,5,2,0,0,826,828,3,40,20,0,827,826,1,0,0,0,828,831,1,0,
		0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,
		833,5,3,0,0,833,834,3,40,20,0,834,835,5,3,0,0,835,986,1,0,0,0,836,837,
		5,2,0,0,837,838,3,102,51,0,838,839,3,14,7,0,839,840,3,16,8,0,840,841,5,
		3,0,0,841,986,1,0,0,0,842,843,5,2,0,0,843,844,3,104,52,0,844,845,3,80,
		40,0,845,846,5,3,0,0,846,986,1,0,0,0,847,848,5,2,0,0,848,849,3,106,53,
		0,849,850,3,80,40,0,850,851,5,3,0,0,851,986,1,0,0,0,852,853,5,2,0,0,853,
		854,3,108,54,0,854,856,5,2,0,0,855,857,3,78,39,0,856,855,1,0,0,0,857,858,
		1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,5,3,0,
		0,861,863,5,2,0,0,862,864,3,52,26,0,863,862,1,0,0,0,864,865,1,0,0,0,865,
		863,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,5,3,0,0,868,869,5,
		3,0,0,869,986,1,0,0,0,870,871,5,2,0,0,871,872,3,110,55,0,872,873,3,14,
		7,0,873,877,5,2,0,0,874,876,3,14,7,0,875,874,1,0,0,0,876,879,1,0,0,0,877,
		875,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,877,1,0,0,0,880,881,5,
		3,0,0,881,882,3,40,20,0,882,883,5,3,0,0,883,986,1,0,0,0,884,885,5,2,0,
		0,885,886,3,112,56,0,886,887,3,24,12,0,887,888,5,3,0,0,888,986,1,0,0,0,
		889,890,5,2,0,0,890,891,3,114,57,0,891,892,5,3,0,0,892,986,1,0,0,0,893,
		894,5,2,0,0,894,895,3,116,58,0,895,896,5,3,0,0,896,986,1,0,0,0,897,898,
		5,2,0,0,898,899,3,118,59,0,899,900,5,3,0,0,900,986,1,0,0,0,901,902,5,2,
		0,0,902,903,3,120,60,0,903,904,3,170,85,0,904,905,5,3,0,0,905,986,1,0,
		0,0,906,907,5,2,0,0,907,908,3,122,61,0,908,909,5,3,0,0,909,986,1,0,0,0,
		910,911,5,2,0,0,911,912,3,124,62,0,912,913,3,26,13,0,913,914,5,3,0,0,914,
		986,1,0,0,0,915,916,5,2,0,0,916,917,3,126,63,0,917,918,5,3,0,0,918,986,
		1,0,0,0,919,920,5,2,0,0,920,921,3,128,64,0,921,922,5,3,0,0,922,986,1,0,
		0,0,923,924,5,2,0,0,924,925,3,130,65,0,925,926,5,3,0,0,926,986,1,0,0,0,
		927,928,5,2,0,0,928,929,3,132,66,0,929,931,5,2,0,0,930,932,3,52,26,0,931,
		930,1,0,0,0,932,933,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,935,1,
		0,0,0,935,936,5,3,0,0,936,937,5,3,0,0,937,986,1,0,0,0,938,939,5,2,0,0,
		939,940,3,134,67,0,940,941,3,14,7,0,941,945,5,2,0,0,942,944,3,46,23,0,
		943,942,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,
		1,0,0,0,947,945,1,0,0,0,948,949,5,3,0,0,949,950,3,52,26,0,950,951,5,3,
		0,0,951,986,1,0,0,0,952,953,5,2,0,0,953,954,3,136,68,0,954,955,3,16,8,
		0,955,956,5,3,0,0,956,986,1,0,0,0,957,958,5,2,0,0,958,959,3,138,69,0,959,
		960,3,16,8,0,960,961,5,3,0,0,961,986,1,0,0,0,962,963,5,2,0,0,963,964,3,
		140,70,0,964,965,5,3,0,0,965,986,1,0,0,0,966,967,5,2,0,0,967,968,3,142,
		71,0,968,969,5,3,0,0,969,986,1,0,0,0,970,971,5,2,0,0,971,972,3,144,72,
		0,972,973,3,38,19,0,973,974,5,3,0,0,974,986,1,0,0,0,975,976,5,2,0,0,976,
		977,3,146,73,0,977,978,3,14,7,0,978,979,5,3,0,0,979,986,1,0,0,0,980,981,
		5,2,0,0,981,982,3,148,74,0,982,983,3,168,84,0,983,984,5,3,0,0,984,986,
		1,0,0,0,985,774,1,0,0,0,985,779,1,0,0,0,985,784,1,0,0,0,985,788,1,0,0,
		0,985,792,1,0,0,0,985,798,1,0,0,0,985,804,1,0,0,0,985,822,1,0,0,0,985,
		836,1,0,0,0,985,842,1,0,0,0,985,847,1,0,0,0,985,852,1,0,0,0,985,870,1,
		0,0,0,985,884,1,0,0,0,985,889,1,0,0,0,985,893,1,0,0,0,985,897,1,0,0,0,
		985,901,1,0,0,0,985,906,1,0,0,0,985,910,1,0,0,0,985,915,1,0,0,0,985,919,
		1,0,0,0,985,923,1,0,0,0,985,927,1,0,0,0,985,938,1,0,0,0,985,952,1,0,0,
		0,985,957,1,0,0,0,985,962,1,0,0,0,985,966,1,0,0,0,985,970,1,0,0,0,985,
		975,1,0,0,0,985,980,1,0,0,0,986,165,1,0,0,0,987,988,7,4,0,0,988,167,1,
		0,0,0,989,990,5,82,0,0,990,1019,3,24,12,0,991,992,5,87,0,0,992,1019,3,
		166,83,0,993,994,5,88,0,0,994,1019,3,166,83,0,995,996,5,96,0,0,996,1019,
		3,166,83,0,997,998,5,97,0,0,998,1019,3,166,83,0,999,1000,5,98,0,0,1000,
		1019,3,166,83,0,1001,1002,5,99,0,0,1002,1019,3,166,83,0,1003,1004,5,100,
		0,0,1004,1019,3,166,83,0,1005,1006,5,101,0,0,1006,1019,3,166,83,0,1007,
		1008,5,102,0,0,1008,1019,3,166,83,0,1009,1010,5,103,0,0,1010,1019,3,16,
		8,0,1011,1012,5,105,0,0,1012,1019,3,24,12,0,1013,1014,5,106,0,0,1014,1019,
		3,16,8,0,1015,1016,5,115,0,0,1016,1019,3,16,8,0,1017,1019,3,38,19,0,1018,
		989,1,0,0,0,1018,991,1,0,0,0,1018,993,1,0,0,0,1018,995,1,0,0,0,1018,997,
		1,0,0,0,1018,999,1,0,0,0,1018,1001,1,0,0,0,1018,1003,1,0,0,0,1018,1005,
		1,0,0,0,1018,1007,1,0,0,0,1018,1009,1,0,0,0,1018,1011,1,0,0,0,1018,1013,
		1,0,0,0,1018,1015,1,0,0,0,1018,1017,1,0,0,0,1019,169,1,0,0,0,1020,1029,
		5,76,0,0,1021,1029,5,77,0,0,1022,1029,5,78,0,0,1023,1029,5,83,0,0,1024,
		1029,5,93,0,0,1025,1029,5,104,0,0,1026,1029,5,116,0,0,1027,1029,3,26,13,
		0,1028,1020,1,0,0,0,1028,1021,1,0,0,0,1028,1022,1,0,0,0,1028,1023,1,0,
		0,0,1028,1024,1,0,0,0,1028,1025,1,0,0,0,1028,1026,1,0,0,0,1028,1027,1,
		0,0,0,1029,171,1,0,0,0,1030,1031,7,5,0,0,1031,173,1,0,0,0,1032,1036,5,
		15,0,0,1033,1036,5,13,0,0,1034,1036,3,30,15,0,1035,1032,1,0,0,0,1035,1033,
		1,0,0,0,1035,1034,1,0,0,0,1036,175,1,0,0,0,1037,1038,5,2,0,0,1038,1039,
		5,32,0,0,1039,1040,3,80,40,0,1040,1041,5,3,0,0,1041,1066,1,0,0,0,1042,
		1043,5,2,0,0,1043,1044,5,33,0,0,1044,1045,3,80,40,0,1045,1046,5,3,0,0,
		1046,1066,1,0,0,0,1047,1048,5,2,0,0,1048,1049,5,34,0,0,1049,1051,5,2,0,
		0,1050,1052,3,78,39,0,1051,1050,1,0,0,0,1052,1053,1,0,0,0,1053,1051,1,
		0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1056,5,3,0,0,1056,1058,
		5,2,0,0,1057,1059,3,52,26,0,1058,1057,1,0,0,0,1059,1060,1,0,0,0,1060,1058,
		1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,3,0,0,1063,1064,
		5,3,0,0,1064,1066,1,0,0,0,1065,1037,1,0,0,0,1065,1042,1,0,0,0,1065,1047,
		1,0,0,0,1066,177,1,0,0,0,1067,1068,5,77,0,0,1068,1081,3,16,8,0,1069,1070,
		5,78,0,0,1070,1081,3,24,12,0,1071,1072,5,83,0,0,1072,1081,3,172,86,0,1073,
		1074,5,93,0,0,1074,1081,3,24,12,0,1075,1076,5,104,0,0,1076,1081,3,174,
		87,0,1077,1078,5,116,0,0,1078,1081,3,24,12,0,1079,1081,3,38,19,0,1080,
		1067,1,0,0,0,1080,1069,1,0,0,0,1080,1071,1,0,0,0,1080,1073,1,0,0,0,1080,
		1075,1,0,0,0,1080,1077,1,0,0,0,1080,1079,1,0,0,0,1081,179,1,0,0,0,1082,
		1083,5,2,0,0,1083,1084,3,52,26,0,1084,1085,3,52,26,0,1085,1086,5,3,0,0,
		1086,181,1,0,0,0,1087,1088,5,2,0,0,1088,1089,3,14,7,0,1089,1090,3,166,
		83,0,1090,1091,5,3,0,0,1091,183,1,0,0,0,1092,1093,7,6,0,0,1093,185,1,0,
		0,0,1094,1095,3,24,12,0,1095,187,1,0,0,0,1096,1100,5,2,0,0,1097,1099,3,
		52,26,0,1098,1097,1,0,0,0,1099,1102,1,0,0,0,1100,1098,1,0,0,0,1100,1101,
		1,0,0,0,1101,1103,1,0,0,0,1102,1100,1,0,0,0,1103,1104,5,3,0,0,1104,189,
		1,0,0,0,1105,1109,5,2,0,0,1106,1108,3,182,91,0,1107,1106,1,0,0,0,1108,
		1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,
		1109,1,0,0,0,1112,1113,5,3,0,0,1113,191,1,0,0,0,1114,1116,5,2,0,0,1115,
		1117,3,178,89,0,1116,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1116,1,0,0,0,
		1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,5,3,0,0,1121,193,1,0,0,0,
		1122,1126,5,2,0,0,1123,1125,3,176,88,0,1124,1123,1,0,0,0,1125,1128,1,0,
		0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,1129,1,0,0,0,1128,1126,1,
		0,0,0,1129,1130,5,3,0,0,1130,195,1,0,0,0,1131,1132,3,36,18,0,1132,197,
		1,0,0,0,1133,1134,3,30,15,0,1134,199,1,0,0,0,1135,1139,5,2,0,0,1136,1138,
		3,14,7,0,1137,1136,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,
		1,0,0,0,1140,1142,1,0,0,0,1141,1139,1,0,0,0,1142,1143,5,3,0,0,1143,201,
		1,0,0,0,1144,1148,5,2,0,0,1145,1147,3,14,7,0,1146,1145,1,0,0,0,1147,1150,
		1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,0,1150,1148,
		1,0,0,0,1151,1152,5,3,0,0,1152,203,1,0,0,0,1153,1155,5,2,0,0,1154,1156,
		3,180,90,0,1155,1154,1,0,0,0,1156,1157,1,0,0,0,1157,1155,1,0,0,0,1157,
		1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,5,3,0,0,1160,205,1,0,0,0,1161,
		1173,3,184,92,0,1162,1173,3,186,93,0,1163,1173,3,188,94,0,1164,1173,3,
		190,95,0,1165,1173,3,192,96,0,1166,1173,3,194,97,0,1167,1173,3,196,98,
		0,1168,1173,3,198,99,0,1169,1173,3,200,100,0,1170,1173,3,202,101,0,1171,
		1173,3,204,102,0,1172,1161,1,0,0,0,1172,1162,1,0,0,0,1172,1163,1,0,0,0,
		1172,1164,1,0,0,0,1172,1165,1,0,0,0,1172,1166,1,0,0,0,1172,1167,1,0,0,
		0,1172,1168,1,0,0,0,1172,1169,1,0,0,0,1172,1170,1,0,0,0,1172,1171,1,0,
		0,0,1173,207,1,0,0,0,1174,1183,5,17,0,0,1175,1183,3,206,103,0,1176,1183,
		5,21,0,0,1177,1178,5,2,0,0,1178,1179,5,10,0,0,1179,1180,3,24,12,0,1180,
		1181,5,3,0,0,1181,1183,1,0,0,0,1182,1174,1,0,0,0,1182,1175,1,0,0,0,1182,
		1176,1,0,0,0,1182,1177,1,0,0,0,1183,209,1,0,0,0,80,220,230,245,252,261,
		265,269,278,282,290,294,300,308,312,321,339,343,357,367,379,391,404,415,
		419,427,440,451,461,466,471,480,488,493,499,506,515,530,538,547,560,568,
		587,596,606,613,618,626,638,651,656,663,667,747,753,763,810,817,829,858,
		865,877,933,945,985,1018,1028,1035,1053,1060,1065,1080,1100,1109,1118,
		1126,1139,1148,1157,1172,1182
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
